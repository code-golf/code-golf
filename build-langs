#!/usr/bin/env raku

use TOML::Thumb;

unit sub MAIN(Bool :$no-push, *@langs);

chdir $*PROGRAM.dirname;

my %langs = from-toml 'config/data/langs.toml'.IO;

if my $unknown = @langs ∖ %langs {
    note "Unknown langs: $unknown";
    exit 1;
}

# Build (and maybe push) lang-base.
run <docker buildx build>,
    '--file',   'docker/lang-base.Dockerfile',
    '--pull',
    ( '--push' unless $no-push ),
    '--tag',    'codegolf/lang-base',
    '.';

for %langs{ @langs || * }:p.sort: *.key.fc -> (:key($name), :value(%lang)) {
    my $id  = id($name);
    my $img = "codegolf/lang-$id";

    # Tag the builder stage so "docker system prune" won't remove it.
    run «docker buildx build -t "{$img}-builder" --pull --target builder "langs/$id"»;
    run «docker buildx build -t $img "langs/$id"»;

    # Size.
    my $proc = run :out,
        «docker images --format '{{.Size}}' -f "reference={$img}:latest"»;

    $proc.sink;

    with %lang<size> = $proc.out.slurp(:close).chomp {
        s/(.)B$/ {$0.uc}iB/;          # "XB" → " XiB"
        s/^ ( \d  \d ) ' ' /{$0}.0 /; #   99 → 99.0
        s/^ ( \d\.\d ) ' ' /{$0}0 /;  #  9.9 → 9.90
    }

    # Version.
    if $id ~~ any <assembly befunge brainfuck cjam fish golfscript hare hexagony k scala> {
        "langs/$id/Dockerfile".IO.slurp ~~ / ' VERSION=' (\S+) /;
        %lang<version> = $id eq 'assembly' ?? "DefAssembler $0" !! $0;
    }
    else {
        # Forth outputs it's version number over stderr.
        my $proc = run «docker run -i --rm --tmpfs '/tmp:exec' $img»,
            :in, :out, :merge(so $id eq 'forth' | 'scheme');

        $proc.in.say: 'puts [info patchlevel]' if $id eq 'tcl';
        $proc.in.close;

        my $ver = $proc.out.slurp(:close).chomp.trans: "\n" => ' ';

        given $name {
            # Dotted decimal or hyphenated date.
            my $digits = $ver ~~ / \d+ ( <[.-]> \d+ )+ /;

            when 'AWK'
               | 'Forth'
               | 'Fortran'
               | 'sed'        { $ver = "GNU $name $digits" }
            when 'BASIC'      { $ver = "FreeBASIC $digits" }
            when 'BQN'        { $ver = "C$name $digits" }
            when 'C'          { $ver = "Tiny C Compiler $digits" }
            when 'C#'
               | 'F#'
               | 'PowerShell' { }
            when 'C++'        { $ver = "Clang $digits" }
            when 'Clojure'    { $ver = "Babashka $digits" }
            when 'COBOL'      { $ver = "GnuCOBOL $digits" }
            when 'D'          {
                $ver ~~ m/ v (\S+) /;
                $ver = "D $0 on LDC $digits";
            }
            when 'Haskell'    { $ver = "GHC $digits" }
            when 'Java'       { $ver = "OpenJDK $digits" }
            when 'JavaScript' { $ver = "V8 $digits" }
            when 'Lisp'       { $ver = "GNU CLISP $digits" }
            when 'Pascal'     { $ver = "Free Pascal $digits" }
            when 'Prolog'     { $ver = "SWI-Prolog $digits" }
            when 'Raku'       {
                $ver ~~ m:g/ v (\S+) '.' /;
                $ver = "Raku $1[0] on Rakudo $0[0]";
            }
            when 'Rexx'       { $ver = "Regina $digits" }
            when 'Rockstar'   { $ver = "Rocky $digits" }
            when 'Scheme'     { $ver = "Chez Scheme $digits" }
            when 'SQL'        { $ver = "SQLite $digits" }
            default           { $ver = $digits }
        }

        die "Couldn't get version string for $id." unless $ver;
        %lang<version> = $ver;
    }

    run «docker push $img» unless $no-push;
}

spurt 'config/data/langs.toml', to-toml %langs;

# Reorder Dockerfiles: largest first to speed-up partial deploys.
my $layers;
my $max = %langs.keys».&id».chars.max;

$layers ~= sprintf(
    qq[COPY --from=codegolf/lang-%s%s ["/", "/langs/%1\$s/rootfs/"%2\$s] # %8s\n],
    id(.key), ' ' x $max - id(.key).chars, .value<size>,
) for %langs.sort: { so .value<size> ~~ /K/, -.value<size>.split(" ")[0], id(.key) };

.spurt: .slurp.subst: / ( 'COPY --from=codegolf' \N+ \n )+ /, $layers
    for <docker/dev.Dockerfile docker/live.Dockerfile>».IO;

sub id { $^name.lc.subst(' ', '-').trans: qw[# + ><>] => qw[-sharp p fish] }

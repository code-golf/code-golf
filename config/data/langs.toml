[05AB1E]
args       = [ '/usr/bin/05ab1e', '-' ]
experiment = 233
size       = '28.2 MiB'
version    = 'c31668b'
website    = 'https://github.com/Adriandmen/05AB1E'
example    = '''
"Printing"
”Ÿ™,‚ï!”,

"Looping"
9ƒN,}

"Accessing arguments"
|»,}
'''

['><>']
args    = [ '/usr/bin/fish', '--no-prng', '-c', '$code', '-u' ]
size    = '4.85 MiB'
version = '96b1cfc'
website = 'https://github.com/primo-ppcg/fish-jit'
example = '''
\ printing
> "!dlroW ,olleH" ooooooooooooo ao 03.
  looping
> 0 v
    >:nao 1+ :9)?v
v               ~<
  accessing arguments
> i : ?!v : 0) ?v ~;
        a
        o       o
        ~
^       <       <

Arguments are available via STDIN,
each argument is NULL terminated.
x is a no-op.
'''

['ALGOL 68']
args       = [ '/usr/bin/algol-68', '--exec', '$code', '--' ]
experiment = 856
size       = '4.66 MiB'
version    = 'Algol 68 Genie 3.5.12'
website    = 'https://jmvdveer.home.xs4all.nl/en.algol-68-genie.html'
example    = '''
# Printing #
printf($"Hello, World!"l$);

# Looping #
FOR i FROM 0 TO 9 DO
    printf(($g(0)l$, i))
OD;

# Accessing arguments #
FOR i FROM 2 TO a68g argc DO
    printf(($gl$, a68g argv(i)))
OD
'''

[APL]
args       = [ '/usr/bin/apl', '-' ]
env        = [ 'DYALOG=/opt/mdyalog/19.0/64/unicode' ]
experiment = 135
size       = '15.0 MiB'
version    = 'Dyalog APL 19.0.50027'
website    = 'https://www.dyalog.com'
example    = '''
⍝ Printing
⎕←'Hello, World!'

⍝ Looping
⎕IO←0
{⎕←⍵}¨⍳10

⍝ Accessing arguments
⎕←¨1↓2⎕NQ#'GetCommandLineArgs'
'''

[Arturo]
args       = [ '/usr/bin/arturo', '-e', '$code' ]
experiment = 915
size       = '5.33 MiB'
version    = '1feabea'
website    = 'https://arturo-lang.io'
example    = '''
; Printing
print "Hello, World!"

; Looping
loop 0..9 'i ->
    print i

; Accessing arguments
loop arg [a] [
    print a
]
'''

[Assembly]
args    = [ '/usr/bin/defasm', '--size-out=3', '-w', '-r' ]
size    = '114 MiB'
version = 'DefAssembler 2.4.4'
website = 'https://www.npmjs.com/package/@defasm/core'
example = '''
SYS_WRITE = 1
SYS_EXIT = 60
STDOUT_FILENO = 1

# Printing
.data
buffer: .string "Hello, World!\n"
bufferLen = . - buffer

.text
mov $SYS_WRITE, %eax
mov $STDOUT_FILENO, %edi
mov $buffer, %esi
mov $bufferLen, %edx
syscall

# Looping
.data
digit: .byte   '0', '\n'

.text
mov $10, %bl
numberLoop:
    mov $SYS_WRITE, %eax
    mov $STDOUT_FILENO, %edi
    mov $digit, %esi
    mov $2, %edx
    syscall

    incb (%rsi)
    dec %bl
    jnz numberLoop

# Accessing arguments
pop %rbx
pop %rax

argLoop:
    dec %rbx
    jz endArgLoop

    pop %rsi
    mov %rsi, %rdi

    mov $-1, %ecx
    xor %al, %al
    repnz scasb

    not %ecx
    movb $'\n', -1(%rsi, %rcx)

    mov %ecx, %edx
    mov $SYS_WRITE, %eax
    mov $STDOUT_FILENO, %edi
    syscall

    jmp argLoop
endArgLoop:

mov $SYS_EXIT, %eax
mov $0, %edi
syscall
'''

[AWK]
args    = [ '/usr/bin/gawk', '-v', 'RS=\0', '$code' ]
size    = '1.80 MiB'
version = 'GNU AWK 5.3.1'
website = 'https://www.gnu.org/software/gawk/'
example = '''
BEGIN {
    # Printing
    print("Hello, World!")

    # Looping
    for (i = 0; i < 10; i++) {
        print(i)
    }
}

# Arguments are available via STDIN in the form of records
# Each record is NULL terminated
# By default, AWK automatically performs actions on each record
{
    # $0 is the full record while $1-$NF accesses individual fields in the record,
    # where NF is the number of fields in the current record
    print($0)
}
'''

[Bash]
args    = [ '/usr/bin/bash', '-s', '-' ]
size    = '1.20 MiB'
version = '5.2.37'
website = 'https://www.gnu.org/software/bash/'
example = '''
# Printing
echo Hello, World!

# Looping
for i in {0..9}; do
    echo $i;
done

# Accessing arguments
for arg; do
    echo $arg;
done
'''

[BASIC]
args    = [ '/usr/bin/basic', '-' ]
size    = '205 MiB'
version = 'FreeBASIC 1.10.1'
website = 'https://freebasic.net'
example = '''
' Printing
Print "Hello, World!"

' Looping
For i As UInteger = 0 To 9
    Print i
Next

' Accessing arguments
For i As Integer = 1 To __FB_ARGC__ - 1
    Print Command(i)
Next
'''

[Befunge]
args       = [ '/usr/bin/befunge', '-' ]
experiment = 428
size       = '3.95 MiB'
version    = 'b7bf640'
website    = 'https://github.com/VorpalBlade/cfunge'
example    = '''
v Printing
> "!dlroW ,olleH" ck, v
v                   ,a<

v Looping
> 0 v            <
    >:.a, 1+ :9`!|
v               $<

v Accessing arguments
> #@~ :0`!#v_ ,
^        ,a<
'''

[Berry]
args    = [ '/usr/bin/berry', '-' ]
size    = '986 KiB'
version = '1.1.0'
website = 'https://berry-lang.github.io'
example = '''
# Printing
print('Hello, World!')

# Looping
for i : 0 .. 9
    print(i)
end

# Accessing arguments
for a : _argv[1..]
    print(a)
end
'''

[BQN]
args       = [ '/usr/bin/bqn', '-' ]
experiment = 474
size       = '1.26 MiB'
version    = 'CBQN 0.7.0'
website    = 'https://github.com/dzaima/CBQN'
example    = '''
# Printing
•Out "Hello, World!"

# Looping
•Show ¨↕10

# Accessing arguments
•Out ¨•args
'''

[brainfuck]
args    = [ '/usr/bin/brainfuck', '-xc', '$code' ]
size    = '51.1 KiB'
version = '077cc7f'
website = 'https://github.com/primo-ppcg/bfci'
example = '''
>>Printing
+[-->-[>>+>-----<<]<--<---]>-.>>>+.>>..+++[.>]<<<<.+++.------.<<-.>>>>+.[<->-]<-.>

>>Looping
++++++++[>++++++<-]
++++++++++[>.+>++++++++++.[-]<<-]

>>Accessing arguments
,[
    [
        .[-],
    ]
    ++++++++++.
    [-],
]

Arguments are available via STDIN; each argument is NULL terminated;
Taking input after EOF leaves the cell unchanged; the tape is circular
with 65536 cells; and cells are 8 bit with wrapping;
'''

[C]
args    = [ '/usr/bin/tcc', '-run', '-' ]
size    = '1.73 MiB'
version = 'Tiny C Compiler 0.9.27'
website = 'https://bellard.org/tcc/'
example = '''
#include <stdio.h>

int main(int argc, char* argv[]) {
    // Printing
    puts("Hello, World!");

    // Looping
    for (int i = 0; i < 10; i++)
        printf("%d\n", i);

    // Accessing arguments
    for (int i = 1; i < argc; i++)
        puts(argv[i]);

    return 0;
}
'''

['C#']
args    = [ '/usr/bin/c-sharp', '-' ]
env     = [ 'DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1' ]
size    = '107 MiB'
version = 'C# 13.0 on .NET 9.0.1'
website = 'https://docs.microsoft.com/dotnet/csharp/'
example = '''
// Printing
Console.WriteLine("Hello, World!");

// Looping
for (int i = 0; i < 10; i++)
    Console.WriteLine(i);

// Accessing arguments
foreach (String arg in args)
    Console.WriteLine(arg);

// Implicit using directives for console applications are enabled.
// See: https://docs.microsoft.com/en-us/dotnet/core/tutorials/top-level-templates#implicit-using-directives
'''

['C++']
args    = [ '/usr/bin/cpp', '-' ]
size    = '142 MiB'
version = 'Clang 19.1.7'
website = 'https://clang.llvm.org'
example = '''
#include <iostream>

int main(int argc, char* argv[]) {
    // Printing
    std::cout<<"Hello, World!"<<std::endl;

    // Looping
    for (int i = 0; i < 10; i++)
        std::cout<<i<<std::endl;

    // Accessing arguments
    for (int i = 1; i < argc; i++)
        std::cout<<argv[i]<<std::endl;

    return 0;
}

// Code is compiled with clang with -std=c++23
// See: https://clang.llvm.org/cxx_status.html
'''

[Civet]
args    = [ '/usr/local/dist/civet', '--comptime', '--no-config', '-' ]
env     = [ 'NODE_ICU_DATA=/usr/share/icu' ]
size    = '71.8 MiB'
version = '0.9.6'
website = 'https://civet.dev'
example = '''
// Printing
console.log 'Hello, World!'

// Looping
for i of [0..9]
    console.log i

// Accessing arguments
for arg of process.argv[2..]
    console.log arg
'''

[CJam]
args       = [ '/usr/bin/cjam', '-' ]
experiment = 1493
size       = '132 MiB'
version    = '0.6.5'
website    = 'https://sourceforge.net/projects/cjam/'
example    = '''
e# Printing
"Hello, World!"

e# Looping
T{1_$+}9*]N*N

e# Accessing arguments
eaN*
'''

[Clojure]
args    = [ '/usr/bin/clojure', '-e', '$code' ]
size    = '66.4 MiB'
version = 'Babashka 1.12.196'
website = 'https://babashka.org'
example = '''
; Printing
(println "Hello, World!")

; Looping
(dotimes [i 10]
  (println i))

; Accessing arguments
(doseq [arg *command-line-args*]
  (println arg))
'''

[COBOL]
args    = [ '/usr/bin/cobol', '-' ]
size    = '4.61 MiB'
version = 'GnuCOBOL 3.2.0'
website = 'https://gnucobol.sourceforge.io'
example = '''
program-id.example.

data division.
local-storage section.
1 n pic 99 value 0.
1 i pic 9999.
1 a pic X(99).
procedure division.

*> Printing
display "Hello, World!"

*> Looping
perform 10 times
display n(2- function log10(n):)
add 1 to n
end-perform.

*> Accessing arguments
accept i from argument-number
perform i times
accept a from argument-value
display a
end-perform.
end-program.

'''

[Coconut]
args    = [ '/usr/bin/coconut', '--quiet', '--target', 'sys', '--keep-lines', '--argv' ]
env     = [ 'PYTHON_COLORS=1' ]
size    = '87.3 MiB'
version = '3.1.2'
website = 'https://coconut-lang.org'
example = '''
import sys

# Printing
'Hello, World!' |> print

# Looping
for i in range(10):
    i |> print

# Accessing arguments
for arg in sys.argv[1:]:
    arg |> print
'''

[CoffeeScript]
args       = [ '/usr/bin/coffeescript', '-' ]
env        = [ 'NODE_ICU_DATA=/usr/share/icu' ]
experiment = 450
size       = '71.3 MiB'
version    = '2.7.0'
website    = 'https://coffeescript.org'
example    = '''
# Printing
console.log 'Hello, World!'

# Looping
for i in [0..9]
    console.log i

# Accessing arguments
for arg in process.argv[2..]
    console.log arg
'''

['Common Lisp']
args      = [ '/usr/bin/lisp', '-' ]
redirects = [ 'lisp' ]
size      = '31.1 MiB'
version   = 'GNU CLISP 2.49.92'
website   = 'https://clisp.sourceforge.io'
example   = '''
; Printing
(write-line "Hello, World!")

; Looping
(loop for i from 0 to 9
    do (format t "~d~%" i)
)

; Accessing arguments
(loop for arg in *args*
    do (write-line arg)
)
'''

[Crystal]
args    = [ '/usr/bin/crystal', 'run', '--stdin-filename', 'code.cr', '--' ]
env     = [ 'CRYSTAL_CACHE_DIR=/tmp', 'PATH=/usr/bin:/bin' ]
size    = '270 MiB'
version = '1.15.0'
website = 'https://crystal-lang.org'
example = '''
# Printing
puts "Hello, World!"

# Looping
(0..9).each do |i|
    puts i
end

# Accessing arguments
ARGV.each do |arg|
    puts arg
end
'''

[D]
args    = [ '/usr/bin/D', '-' ]
env     = [ 'PATH=/usr/bin' ]
size    = '93.3 MiB'
version = 'DMD 2.109.1'
website = 'https://dlang.org'
example = '''
import std.stdio;

void main(string[] argv) {
    // Printing
    writeln("Hello, World!");

    // Looping
    foreach (i; 0 .. 10) {
        writeln(i);
    }

    // Accessing arguments
    foreach (arg; argv[1 .. $]) {
        writeln(arg);
    }
}
'''

[Dart]
args    = [ '/usr/bin/dartwrapper', '-' ]
size    = '239 MiB'
version = '3.6.2'
website = 'https://dart.dev'
example = '''
void main(List<String> argv) {
  // Printing
  print("Hello, World!");

  // Looping
  for (var i = 0; i < 10; i++) {
    print(i);
  }

  // Accessing arguments
  for (final arg in argv) {
    print(arg);
  }
}
'''

[Egel]
args       = [ '/usr/bin/egelwrapper', '-' ]
experiment = 1434
size       = '49.7 MiB'
version    = '0.1.14'
website    = 'https://egel-lang.github.io'
example    = '''
import "prelude.eg"

using System, List

def main =
    # Printing
    print "Hello, World!\n";

    # Looping
    map [ I -> print I "\n" ] (from_to 0 9);

    # Accessing arguments
    map [ ARG -> print ARG "\n" ] (drop 2 args);

    print
'''

[Elixir]
args    = [ '/usr/local/bin/elixir', '-e', '$code', '--' ]
env     = [ 'LANG=C.UTF-8' ]
size    = '74.3 MiB'
version = '1.18.2'
website = 'https://elixir-lang.org'
example = '''
# Printing
IO.puts "Hello, World!"

# Looping
for i <- 0..9, do: IO.puts i

# Accessing arguments
for arg <- System.argv, do: IO.puts arg
'''

[Erlang]
args       = [ '/usr/bin/erlang', '-' ]
experiment = 181
size       = '68.5 MiB'
version    = 'OTP 27.2.1'
website    = 'https://www.erlang.org'
example    = '''
main(Args) ->
  % Printing
  io:format("Hello, World!~n"),

  % Looping
  lists:foreach(fun(N) -> io:format("~p~n", [N]) end, lists:seq(0, 9)),

  % Accessing arguments
  lists:foreach(fun(Arg) -> io:format("~ts~n", [Arg]) end, Args).
'''

['F#']
args    = [ '/usr/bin/f-sharp', '-' ]
env     = [ 'DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1' ]
size    = '109 MiB'
version = 'F# 9.0 on .NET 9.0.1'
website = 'https://fsharp.org'
example = '''
[<EntryPoint>]
let main args =
    // Printing
    printfn "Hello, World!"

    // Looping
    for i in 0..9 do
        printfn "%d" i

    // Accessing arguments
    for arg in args do
        printfn "%s" arg

    0
'''

[Factor]
args    = [ '/factor/factor', '/proc/self/fd/0' ]
size    = '173 MiB'
version = '0.100'
website = 'https://factorcode.org'
example = '''
! Printing
"Hello, World!" print

! Looping
0 ..= 9 [ . ] each

! Accessing arguments
command-line get-global [ print ] each
'''

[Fennel]
args       = [ '/usr/bin/fennelwrapper', '/tmp/code.fnl' ]
experiment = 1144
size       = '673 KiB'
version    = '1.5.1'
website    = 'https://fennel-lang.org'
example    = '''
;; Printing
(print "Hello, World!")

;; Looping
(for [i 0 9]
  (print i))

;; Accessing arguments
(each [i a (ipairs arg)]
  (print a))
'''

[Forth]
args    = [ '/usr/bin/forth', '/proc/self/fd/0' ]
size    = '2.86 MiB'
version = 'GNU Forth 0.7.3'
website = 'https://www.gnu.org/software/gforth/'
example = '''
\ Printing
.( Hello, World!) CR

\ Looping
: looping
    10 0 do i 0 .r cr loop ;
looping

\ Accessing arguments
: accessing-arguments
    begin next-arg 2dup d0<> while type CR repeat 2drop ;
accessing-arguments

bye
'''

[Fortran]
args    = [ '/usr/bin/fortran', '-' ]
size    = '95.1 MiB'
version = 'GNU Fortran 14.2.0'
website = 'https://gcc.gnu.org/fortran/'
example = '''
character(len=32) :: s
integer :: i

! Printing
print "(a)", "Hello, World!"

! Looping
do i = 0, 9
    print "(i0)", i
end do

! Accessing arguments
! (NOTE: getarg() and iargc() are GNU Fortran extensions)
do i = 1, iargc()
    call getarg(i,s)
    print "(a)", s
end do

end
'''

[Gleam]
args    = [ '/usr/bin/gleam', '-', '--' ]
env     = [ 'LANG=C.UTF-8' ]
size    = '91.2 MiB'
version = '1.7.0'
website = 'https://gleam.run'
example = '''
import argv
import gleam/int
import gleam/io
import gleam/list

pub fn main() {
  // Printing
  io.println("Hello, World!")

  // Looping
  list.range(0, 9)
  |> list.each(fn(i) { io.println(int.to_string(i)) })

  // Accessing arguments
  argv.load().arguments
  |> list.each(fn(arg) { io.println(arg) })
}
'''

[Go]
args    = [ '/usr/bin/gowrapper', '-' ]
env     = [ 'GOCACHE=/tmp/cache' ]
size    = '383 MiB'
version = '1.23.5'
website = 'https://go.dev'
example = '''
package main

import (
    "fmt"
    "os"
)

func main() {
    // Printing
    fmt.Println("Hello, World!")

    // Looping
    for i := range 10 {
        fmt.Println(i)
    }

    // Accessing arguments
    for _, arg := range os.Args[1:] {
        fmt.Println(arg)
    }
}
'''

[GolfScript]
args       = [ '/usr/bin/golfscript', '-n', '-e', '$code', '--' ]
args-quine = [ '/usr/bin/golfscript', '-n', '-e', '$code', '-q', '--' ]
size       = '28.6 MiB'
version    = '6155e9f'
website    = 'https://golfscript.com/golfscript/'
example    = '''
# Printing
"Hello, World!"puts

# Looping
10,{p}/

# The stack is initialized with one element, an array of arguments:
n*
'''

[Groovy]
args       = [ '/usr/bin/groovy', '-e', '$code' ]
env        = [ 'JAVA_HOME=/opt/java' ]
experiment = 1145
size       = '146 MiB'
version    = '4.0.25'
website    = 'https://groovy-lang.org'
example    = '''
// Printing
println "Hello, World!"

// Looping
for (i in 0..9)
    println i

// Accessing arguments
for (arg in args)
    println arg
'''

[Harbour]
args       = [ '/usr/bin/harbour', '-' ]
experiment = 1614
size       = '12.2 MiB'
version    = '3.0.0'
website    = 'https://harbour.github.io'
example    = '''
LOCAL i

// Printing
?? "Hello, World!"

// Looping
FOR i := 0 TO 9
    ? hb_ntos( i )
NEXT

// Accessing arguments
FOR i := 1 TO PCount()
    ? hb_PValue( i )
NEXT
'''

[Hare]
args       = [ '/usr/bin/harewrapper', '-' ]
env        = [ 'PATH=/usr/local/bin:/usr/bin' ]
experiment = 1323
size       = '11.4 MiB'
version    = '0.24.2'
website    = 'https://harelang.org'
example    = '''
use fmt;
use os;

export fn main() void = {
    // Printing
    fmt::println("Hello, World!")!;

    // Looping
    for (let i = 0; i < 10; i += 1)
        fmt::println(i)!;

    // Accessing arguments
    for (let arg .. os::args[1..])
        fmt::println(arg)!;
};
'''

[Haskell]
args    = [ '/usr/bin/haskell', '-' ]
size    = '339 MiB'
version = 'GHC 9.8.2'
website = 'https://www.haskell.org/ghc/'
example = '''
import System.Environment

main = do
  -- Printing
  putStrLn "Hello, World!"

  -- Looping
  mapM print [0..9]

  -- Accessing arguments
  args <- drop 1 <$> getArgs
  mapM putStrLn args
'''

[Haxe]
args       = [ '/usr/bin/haxewrapper', '-' ]
env        = [ 'HAXE_STD_PATH=/usr/lib/std' ]
experiment = 1366
size       = '39.8 MiB'
version    = '4.3.6'
website    = 'https://haxe.org'
example    = '''
class Main {
    static public function main() {
        // Printing
        Sys.println("Hello, World!");

        // Looping
        for (i in 0...10)
            Sys.println(i);

        // Accessing arguments
        for (arg in Sys.args())
            Sys.println(arg);
    }
}
'''

[Hexagony]
args    = [ '/usr/bin/hexagony', '-d', '-' ]
size    = '8.90 MiB'
version = '770406a'
website = 'https://github.com/SirBogman/Hexagony'
example = '''
          \ P r i n t i n g .
         \ H ; e ; l ; ; o ; \
        / o ; W ; 0 P ; 2 Q < .
       . > ; r ; l ; d ; P 1 ; \
      > * . . . . . . . . . . < .
     . . . . . . . . . . . . . . .
    . . L o o p i n g . . . . . . .
   \ 1 0 ; " $ / } ! ) " ; \ . . . .
  . . . . . . . > . - " = < . . . . .
 . / . . . . . < . . . . . . . . . . .
  . . . . . . . . . . . . . . . . . .
   . . . A c c e s s i n g . . . . .
    . . . A r g u m e n t s . . . .
     . . . . . . > \ . @ . . . . .
      . > $ > , < \ ) < . . . . .
       . . \ . ; / $ 0 / . . . .
        . A r g u m e n t s . .
         . a r e . N U L L . .
          t e r m i n a t e d
'''

[Hush]
args       = [ '/usr/bin/hush', '-' ]
experiment = 656
size       = '3.32 MiB'
version    = '0.1.4'
website    = 'https://hush-shell.github.io'
example    = '''
# Printing
std.print("Hello, World!")

# Looping
for i in std.range(0, 10, 1) do
    std.print(i)
end

# Accessing arguments
for arg in std.iter(std.args()) do
    std.print(arg)
end
'''

[Hy]
args       = [ '/usr/bin/hy', '-' ]
experiment = 586
size       = '41.8 MiB'
version    = '1.0.0'
website    = 'https://hylang.org'
example    = '''
; Printing
(print "Hello, World!")

; Looping
(for [i (range 10)]
    (print i))

; Accessing arguments
(for [arg (get sys.argv (slice 1 None))]
    (print arg))
'''

[iogii]
args       = [ '/usr/bin/iogiiwrapper', '-' ]
experiment = 1770
size       = '34.1 MiB'
version    = '0.2'
website    = 'https://golfscript.com/iogii/'
example    = '''
# Printing
"Hello, World!
"

# Looping
10T

# Accessing arguments
$
'''

[J]
args    = [ '/usr/bin/j', '/tmp/code.ijs' ]
size    = '11.2 MiB'
version = '9.5.6'
website = 'https://www.jsoftware.com'
example = '''
NB.Printing
echo'Hello, World!'

NB.Looping
echo i.10 1

NB.Accessing arguments
echo each 2}.ARGV
'''

[Janet]
args    = [ '/usr/bin/janet', '/proc/self/fd/0' ]
size    = '902 KiB'
version = '1.37.1'
website = 'https://janet-lang.org'
example = '''
# Printing
(print "Hello, World!")

# Looping
(for i 0 10
  (print i))

# Accessing arguments
(each arg (tuple/slice (dyn :args) 1)
  (print arg))
'''

[Java]
args    = [ '/usr/bin/java', '-' ]
size    = '58.4 MiB'
version = 'OpenJDK 23.0.2'
website = 'https://openjdk.java.net'
example = '''
class Main {
    public static void main(String[] args) {
        // Printing
        System.out.println("Hello, World!");

        // Looping
        for (int i = 0; i < 10; i++)
            System.out.println(i);

        // Accessing arguments
        for (String arg : args)
            System.out.println(arg);
    }
}
'''

[JavaScript]
args    = [ '/usr/bin/javascript', '-e', '$code', '--' ]
size    = '41.9 MiB'
version = 'V8 13.2.152.36'
website = 'https://v8.dev'
example = '''
// Printing
print("Hello, World!");

// Looping
for (let i = 0; i < 10; i++)
    print(i);

// Accessing arguments
for (let arg of arguments)
    print(arg);
'''

[jq]
args    = [ '/usr/bin/jq', '--args', '--null-input', '--raw-output', '--', '$code' ]
size    = '973 KiB'
version = '1.7.1'
website = 'https://jqlang.github.io/jq/'
example = '''
# Printing
"Hello, World!",

# Looping
range(10),

# Accessing arguments
$ARGS.positional[]
'''

[Julia]
args    = [ '/usr/bin/julia', '--color=yes', '--eval', '$code', '--' ]
size    = '300 MiB'
version = '1.11.3'
website = 'https://julialang.org'
example = '''
# Printing
println("Hello, World!")

# Looping
for i=0:9
    println(i)
end

# Accessing arguments
for arg in ARGS
    println(arg)
end
'''

[K]
args    = [ '/usr/bin/kwrapper', '/tmp/code.k' ]
size    = '631 KiB'
version = '544d014afd'
website = 'https://codeberg.org/ngn/k'
example = '''
/Printing
`0:"Hello, World!"

/Looping
`0:$!10

/Accessing arguments
`0:x
'''

[Kotlin]
args    = [ '/usr/bin/kotlin', '-Xuse-fast-jar-file-system', '-e', '$code' ]
env     = [ 'JAVA_HOME=/opt/java' ]
size    = '224 MiB'
version = '2.1.10'
website = 'https://kotlinlang.org'
example = '''
// Printing
println("Hello, World!")

// Looping
for (i in 0..9)
    println(i)

// Accessing arguments
for (arg in args)
    println(arg)
'''

[Lua]
args    = [ '/usr/bin/lua', '-' ]
size    = '362 KiB'
version = '5.4.7'
website = 'https://www.lua.org'
example = '''
-- Printing
print("Hello, World!")

-- Looping
for i = 0, 9 do
    print(i)
end

-- Accessing arguments
for i = 1, #arg do
    print(arg[i])
end
'''

[Nim]
args    = [ '/usr/bin/nim', '--colors:on', '-o:/tmp/code', '-r', 'c', '-' ]
size    = '15.6 MiB'
version = '2.2.0'
website = 'https://nim-lang.org'
example = '''
import os

# Printing
echo "Hello, World!"

# Looping
for i in 0 .. 9:
    echo i

# Accessing arguments
for arg in commandLineParams():
    echo arg
'''

[OCaml]
args    = [ '/usr/bin/ocaml', '/proc/self/fd/0' ]
size    = '84.5 MiB'
version = '5.3.0'
website = 'https://ocaml.org'
example = '''
(* Printing *)
print_endline "Hello, World!";

(* Looping *)
for i = 0 to 9 do
  Printf.printf "%d\n" i
done;

(* Accessing arguments *)
Sys.argv
  |> Array.to_list
  |> List.tl
  |> List.iter print_endline;
'''

[Odin]
args       = [ '/usr/bin/odinwrapper', '-', '--' ]
experiment = 766
size       = '280 MiB'
version    = '2025-01'
website    = 'https://odin-lang.org'
example    = '''
package main

import "core:fmt"
import "core:os"

main :: proc() {
    // Printing
    fmt.println("Hello, World!")

    // Looping
    for i in 0..<10 {
        fmt.println(i)
    }

    // Accessing arguments
    for arg in os.args[1:] {
        fmt.println(arg)
    }
}
'''

[Pascal]
args    = [ '/usr/bin/pascal', '-' ]
size    = '26.6 MiB'
version = 'Free Pascal 3.2.2'
website = 'https://freepascal.org'
example = '''
var
    i: integer;
begin
    { Printing }
    writeLn('Hello, World!');

    { Looping }
    for i := 0 to 9 do
        writeLn(i);

    { Accessing arguments }
    for i := 1 to argc - 1 do
        writeLn(argv[i]);
end.
'''

[Perl]
args    = [ '/usr/bin/perl', '-E', '$code', '--' ]
size    = '5.54 MiB'
version = '5.40.1'
website = 'https://www.perl.org'
example = '''
# Printing
say 'Hello, World!';

# Looping
say for 0..9;

# Accessing arguments
say for @ARGV;

# Code is run under -E, all current features are enabled.
'''

[PHP]
args    = [ '/usr/bin/php', '--' ]
size    = '8.40 MiB'
version = '8.4.3'
website = 'https://www.php.net'
example = '''
# Printing
echo "Hello, World!\n";

# Looping
for ($i = 0; $i < 10; $i++)
    echo "$i\n";

# Accessing arguments
for ($i = 1; $i < $argc; $i++)
    echo "$argv[$i]\n";
'''

[Picat]
args       = [ '/usr/bin/picat', '-' ]
experiment = 1871
size       = '11.1 MiB'
version    = '3.8'
website    = 'https://picat-lang.org'
example    = '''
main =>
    % Printing
    println("Hello, World!"),

    % Looping
    foreach (I in 0..9)
        println(I)
    end.

main(Args) =>
    % Printing
    println("Hello, World!"),

    % Looping
    foreach (I in 0..9)
        println(I)
    end,

    % Accessing arguments
    foreach (Arg in Args)
        println(Arg)
    end.
'''

[PowerShell]
args       = [ '/usr/bin/powershell' ]
args-quine = [ '/usr/bin/powershell', '--explicit' ]
env        = [ 'DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1' ]
size       = '135 MiB'
version    = 'PowerShell 7.5.0 on .NET 9.0.1'
website    = 'https://docs.microsoft.com/powershell/scripting/overview'
example    = '''
# Printing
Write-Host 'Hello, World!'

# Looping
ForEach ($i in 0..9) {
    Write-Host $i
}

# Accessing arguments
ForEach ($arg in $args) {
    Write-Host $arg
}
'''

[Prolog]
args    = [ '/usr/bin/prolog', '-g', 'halt', '/tmp/code.pl' ]
env     = [ 'LC_ALL=C.UTF-8' ]
size    = '49.3 MiB'
version = 'SWI-Prolog 9.2.9'
website = 'https://www.swi-prolog.org'
example = '''
% Printing
:- writeln("Hello, World!").

% Looping
:- numlist(0, 9, List),
   maplist(writeln, List).

% Accessing arguments
:- prolog_flag(argv, Args),
   maplist(writeln, Args).
'''

[Python]
args    = [ '/usr/bin/python', '-u', '-' ]
env     = [ 'PYTHON_COLORS=1' ]
size    = '29.2 MiB'
version = '3.13.1'
website = 'https://www.python.org'
example = '''
import sys

# Printing
print('Hello, World!')

# Looping
for i in range(10):
    print(i)

# Accessing arguments
for arg in sys.argv[1:]:
    print(arg)
'''

[R]
args       = [ '/usr/bin/Rscript', '-' ]
args-quine = [ '/usr/bin/Rscript', '-e', "source('stdin')" ]
size       = '30.1 MiB'
version    = '4.4.2'
website    = 'https://www.r-project.org'
example    = '''
# Printing
write("Hello, World!", 1)

# Looping
for (i in 0:9) {
    write(i, 1)
}

# Accessing arguments
for (arg in commandArgs(TRUE)) {
    write(arg, 1)
}
'''

[Racket]
args       = [ '/usr/local/bin/racket', '-e', '$code', '--' ]
experiment = 1358
size       = '29.0 MiB'
version    = '8.15'
website    = 'https://racket-lang.org'
example    = '''
; Printing
(displayln "Hello, World!")

; Looping
(for-each println (range 10))

; Accessing arguments
(for ([arg (current-command-line-arguments)])
  (displayln arg))
'''

[Raku]
args      = [ '/usr/bin/raku', '-' ]
redirects = [ 'perl6' ]
size      = '76.0 MiB'
version   = 'Raku 6.d on Rakudo 2025.01'
website   = 'https://raku.org'
example   = '''
# Printing
say 'Hello, World!';

# Looping
.say for ^10;

# Accessing arguments
.say for @*ARGS;
'''

[Rebol]
args       = [ '/usr/bin/rebol', '-qw', '--do', '$code', '--', '--script', '' ]
experiment = 189
size       = '1.23 MiB'
version    = '2.7.8.4.10'
website    = 'https://www.rebol.com'
example    = '''
; Printing
print "Hello, World!"

; Looping
for i 0 9 1 [
    print i
]

; Accessing arguments
foreach arg system/options/args [
    print arg
]
'''

[Rexx]
args       = [ '/usr/bin/rexx', '-' ]
experiment = 873
size       = '3.06 MiB'
version    = 'Regina 3.9.6'
website    = 'https://regina-rexx.sourceforge.io'
example    = '''
-- Printing
say "Hello, World!"

-- Looping
do i = 0 to 9
    say i
end

-- Accessing arguments
do i = 1 to arg()
    say arg(i)
end
'''

[Rockstar]
args    = [ '/usr/bin/rockstar', '-' ]
size    = '127 MiB'
version = 'Rocky 2.1.2'
website = 'https://github.com/gaborsch/rocky'
example = '''
(Printing)
Shout "Hello, World!"

(Looping)
Let i be 0
While i is less than 10
Shout i
Build i up

(Accessing arguments)
While args alike arg
Shout arg
'''

['Rockstar 2']
args    = [ '/usr/bin/rockstarwrapper', '-' ]
size    = '4.26 MiB'
version = '2.0.29'
website = 'https://codewithrockstar.com'
example = '''
(Printing)
print "Hello, World!"

(Looping)
for x in 10
  print x
end

(Accessing arguments)
for arg in arguments
  print arg
end
'''

[Ruby]
args    = [ '/usr/bin/ruby', '-' ]
size    = '33.2 MiB'
version = '3.4.1'
website = 'https://www.ruby-lang.org'
example = '''
# Printing
puts 'Hello, World!'

# Looping
(0..9).each do |i|
    puts i
end

# Accessing arguments
ARGV.each do |arg|
    puts arg
end
'''

[Rust]
args    = [ '/usr/bin/rust', '-' ]
size    = '356 MiB'
version = '1.84.0'
website = 'https://www.rust-lang.org'
example = '''
fn main() {
    // Printing
    println!("Hello, World!");

    // Looping
    for i in 0..10 {
        println!("{i}");
    }

    // Accessing arguments
    for arg in std::env::args().skip(1) {
        println!("{arg}");
    }
}
'''

[Scala]
args       = [ '/usr/local/bin/scala', '-opt:none', '-Xsource:3-cross', '-e', '$code', '--' ]
env        = [ 'JAVA_HOME=/opt/java' ]
experiment = 235
size       = '203 MiB'
version    = '2.13.16'
website    = 'https://www.scala-lang.org'
example    = '''
// Printing
println("Hello, World!")

// Looping
for (i <- 0 to 9)
    println(i)

// Accessing arguments
args.foreach(println)
'''

[Scheme]
args    = [ '/usr/bin/schemewrapper', '-' ]
size    = '7.38 MiB'
version = 'Chez Scheme 10.1.0'
website = 'https://cisco.github.io/ChezScheme/'
example = '''
; Printing
(printf "~a~n" "Hello, World!")

; Looping
(for-each (lambda (i) (display i) (newline)) (iota 10))

; Accessing arguments
(for-each (lambda (arg) (display arg) (newline)) (command-line-arguments))
'''

[sed]
args    = [ '/usr/bin/sed', '-E', '-z', '--sandbox', '-u', '--', '$code' ]
size    = '244 KiB'
version = 'GNU sed 4.9'
website = 'https://www.gnu.org/software/sed/'
example = '''
# Printing
1i Hello, World!

# Looping
2,$ b

h
s/.*/0/
:loop
p
y/012345678/123456789/
/9/ !b loop
G

# Accessing arguments
# (... automatic, one per line ...)

# Arguments are available via STDIN,
# each argument is separated with a null byte.
# The code is run with -E and -z options.
# Output replaces null bytes with newlines.
'''

[SQL]
args    = [ '/usr/bin/sql', '-' ]
size    = '1.21 MiB'
version = 'SQLite 3.48.0'
website = 'https://sqlite.org'
example = '''
-- Printing
SELECT 'Hello, World!';

-- Looping
WITH loop(i) AS (
    SELECT 0
    UNION ALL
    SELECT i + 1 FROM loop
    WHERE i < 9
)
SELECT i FROM loop;

-- Accessing arguments
SELECT arg FROM argv;

-- Only the first column of the first result set will be printed,
-- NULL values will be skipped, and the dialect is SQLite.
'''

[Squirrel]
args       = [ '/usr/bin/squirrel', '-' ]
experiment = 1598
size       = '4.08 MiB'
version    = '3.2'
website    = 'http://squirrel-lang.org'
example    = '''
// Printing
print("Hello, World!\n");

// Looping
for (local i = 0; i < 10; i++)
    printf("%d\n", i);

// Accessing arguments
foreach (arg in vargv)
    print(arg + "\n");
'''

[Stax]
args       = [ '/usr/bin/staxwrapper', '-' ]
env        = [ 'DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1' ]
experiment = 439
size       = '76.5 MiB'
version    = '1.2.1'
website    = 'https://github.com/tomtheisen/stax'
example    = '''
`Printing`d
"Hello, World!"P

`Looping`d
0P9R{P}F

`Accessing arguments`d
Lm
'''

[Swift]
args    = [ '/usr/bin/swift', '-module-cache-path', '/tmp', '-' ]
env     = [ 'PATH=/usr/bin:/bin' ]
size    = '516 MiB'
version = '6.0.3'
website = 'https://swift.org'
example = '''
// Printing
print("Hello, World!")

// Looping
for i in 0...9 {
    print(i)
}

// Accessing arguments
for arg in CommandLine.arguments[1...] {
    print(arg)
}
'''

[Tcl]
args    = [ '/usr/bin/tcl', '/proc/self/fd/0' ]
size    = '5.68 MiB'
version = '9.0.1'
website = 'https://www.tcl-lang.org'
example = '''
# Printing
puts "Hello, World!"

# Looping
for {set x 0} {$x < 10} {incr x} {
    puts $x
}

# Accessing arguments
foreach arg $argv {
    puts $arg
}
'''

[TeX]
args    = [ '/usr/bin/tex', '$code' ]
size    = '9.67 MiB'
version = '3.141592653'
website = 'https://tug.org'
example = '''
% Printing
Hello, World!

% Looping
\newcount\i
\loop\ifnum\i<10
    \the\i\endgraf
    \advance\i by1
\repeat

% Accessing arguments
\newcount\j
\loop\ifnum\j<\argc\relax
    \argv\j\endgraf
    \advance\j by1
\repeat
'''

[Uiua]
args       = [ '/usr/bin/uiua', 'eval', '--', '$code' ]
experiment = 1115
size       = '30.0 MiB'
version    = '0.14.1'
website    = 'https://www.uiua.org'
example    = '''
# Printing
&p"Hello, World!"

# Looping
∵&p⇡10

# Accessing arguments
∵&p↘1&args
'''

[V]
args    = [ '/usr/bin/V', '-' ]
size    = '50.2 MiB'
version = '0.4.9'
website = 'https://vlang.io'
example = '''
import os

// Printing
println('Hello, World!')

// Looping
for i in 0..10 {
    println(i)
}

// Accessing arguments
for arg in os.args[1..] {
    println(arg)
}
'''

[VimL]
args    = [ '/usr/bin/viml', '-' ]
size    = '24.1 MiB'
version = '9.1'
website = 'https://www.vim.org'
example = '''
" Printing
i
Hello, World!
.

" Looping
for i in range(10)
    pu=i
endfo

" Accessing arguments
for a in args
    pu=a
endfo

" Make sure to save the file when you're done!
w
'''

[Vyxal]
args       = [ '/opt/java/bin/java', '-jar', 'vyxal.jar', '-O', '--code', '$code', '--' ]
experiment = 1846
size       = '152 MiB'
version    = '3.6.1'
website    = 'https://vyxal.github.io'
example    = '''
## Printing
"Hello, World!",

## Looping
0,9 (n,}

## Accessing arguments
#? (,}
'''

[Wren]
args    = [ '/usr/bin/wren', '-' ]
size    = '505 KiB'
version = '0.4.0'
website = 'https://wren.io'
example = '''
import "os" for Process

// Printing
System.print("Hello, World!")

// Looping
for (i in 0..9) System.print(i)

// Accessing arguments
for (a in Process.arguments) System.print(a)
'''

[Zig]
args    = [ '/usr/bin/zigwrapper', '-' ]
size    = '298 MiB'
version = '0.13.0'
website = 'https://ziglang.org'
example = '''
const std = @import("std");

pub fn main() !void {
    const stdout = std.io.getStdOut().writer();

    // Printing
    try stdout.print("Hello, World!\n", .{});

    // Looping
    for (0..10) |i|
        try stdout.print("{}\n", .{i});

    // Accessing arguments
    for (std.os.argv[1..]) |arg|
        try stdout.print("{s}\n", .{arg});
}
'''

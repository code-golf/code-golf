['><>']
size    = '4.99 MiB'
version = '888b90f'
website = 'https://github.com/primo-ppcg/fish-jit'
example = '''
\ printing
> "!dlroW ,olleH" ooooooooooooo ao 03.
  looping
> 0 v
    >:nao 1+ :9)?v
v               ~<
  accessing arguments
> i : ?!v : 0) ?v ~;
        a
        o       o
        ~
^       <       <

Arguments are available via STDIN,
each argument is NULL terminated.
x is a no-op.
'''

[Assembly]
size    = '79.9 MiB'
version = 'DefAssembler 2.2.0'
website = 'https://www.npmjs.com/package/@defasm/core'
example = '''
SYS_WRITE = 1
SYS_EXIT = 60
STDOUT_FILENO = 1

# Printing
.data
buffer: .string "Hello, World!\n"
bufferLen = . - buffer

.text
mov $SYS_WRITE, %eax
mov $STDOUT_FILENO, %edi
mov $buffer, %esi
mov $bufferLen, %edx
syscall

# Looping
.data
digit: .byte   '0', '\n'

.text
mov $10, %bl
numberLoop:
    mov $SYS_WRITE, %eax
    mov $STDOUT_FILENO, %edi
    mov $digit, %esi
    mov $2, %edx
    syscall

    incb (%rsi)
    dec %bl
    jnz numberLoop

# Accessing arguments
pop %rbx
pop %rax

argLoop:
    dec %rbx
    jz endArgLoop

    pop %rsi
    mov %rsi, %rdi

    mov $-1, %ecx
    xor %al, %al
    repnz scasb

    not %ecx
    movb $'\n', -1(%rsi, %rcx)

    mov %ecx, %edx
    mov $SYS_WRITE, %eax
    mov $STDOUT_FILENO, %edi
    syscall

    jmp argLoop
endArgLoop:

mov $SYS_EXIT, %eax
mov $0, %edi
syscall
'''

[AWK]
size    = '1.72 MiB'
version = '5.2.1'
website = 'https://www.gnu.org/software/gawk/'
example = '''
BEGIN {
    # Printing
    print("Hello, World!")

    # Looping
    for (i = 0; i < 10; i++) {
        print(i)
    }
}

# Arguments are available via STDIN in the form of records
# Each record is NULL terminated
# By default, AWK automatically performs actions on each record
{
    # $0 is the full record while $1-$NF accesses individual fields in the record,
    # where NF is the number of fields in the current record
    print($0)
}
'''

[Bash]
size    = '1.19 MiB'
version = '5.2.15'
website = 'https://www.gnu.org/software/bash/'
example = '''
# Printing
echo Hello, World!

# Looping
for i in {0..9}; do
    echo $i;
done

# Accessing arguments
for arg; do
    echo $arg;
done
'''

[BASIC]
size    = '268 MiB'
version = 'FreeBASIC 1.09.0'
website = 'https://freebasic.net'
example = '''
' Printing
Print "Hello, World!"

' Looping
For i As UInteger = 0 To 9
    Print i
Next

' Accessing arguments
For i As Integer = 1 To __FB_ARGC__ - 1
    Print Command(i)
Next
'''

[brainfuck]
size    = '4.57 MiB'
version = '3bdbd20'
website = 'https://github.com/primo-ppcg/bf-jit'
example = '''
>>Printing
+[-->-[>>+>-----<<]<--<---]>-.>>>+.>>..+++[.>]<<<<.+++.------.<<-.>>>>+.[<->-]<-.>

>>Looping
++++++++[>++++++<-]
++++++++++[>.+>++++++++++.[-]<<-]

>>Accessing arguments
,[
    [
        .[-],
    ]
    ++++++++++.
    [-],
]

Arguments are available via STDIN; each argument is NULL terminated;
Taking input after EOF leaves the cell unchanged; the tape is circular
with 65536 cells; and cells are 8 bit with wrapping;
'''

[C]
size    = '1.63 MiB'
version = 'Tiny C Compiler 0.9.27'
website = 'https://bellard.org/tcc/'
example = '''
#include <stdio.h>

int main(int argc, char* argv[]) {
    // Printing
    puts("Hello, World!");

    // Looping
    for (int i = 0; i < 10; i++)
        printf("%d\n", i);

    // Accessing arguments
    for (int i = 1; i < argc; i++)
        puts(argv[i]);

    return 0;
}
'''

['C#']
size    = '149 MiB'
version = 'C# 11.0 on .NET 7.0.2'
website = 'https://docs.microsoft.com/dotnet/csharp/'
example = '''
// Printing
Console.WriteLine("Hello, World!");

// Looping
for (int i = 0; i < 10; i++)
    Console.WriteLine(i);

// Accessing arguments
foreach (String arg in args)
    Console.WriteLine(arg);

// Implicit using directives for console applications are enabled.
// See: https://docs.microsoft.com/en-us/dotnet/core/tutorials/top-level-templates#implicit-using-directives
'''

['C++']
size    = '118 MiB'
version = '14.0.6'
website = 'https://clang.llvm.org'
example = '''
#include <iostream>

int main(int argc, char* argv[]) {
    // Printing
    std::cout<<"Hello, World!"<<std::endl;

    // Looping
    for (int i = 0; i < 10; i++)
        std::cout<<i<<std::endl;

    // Accessing arguments
    for (int i = 1; i < argc; i++)
        std::cout<<argv[i]<<std::endl;

    return 0;
}

// Code is compiled with clang with -std=c++2b
// See: https://clang.llvm.org/cxx_status.html
'''

[COBOL]
size    = '4.12 MiB'
version = 'GnuCOBOL 3.1.2.0'
website = 'https://gnucobol.sourceforge.io'
example = '''
program-id.example.

data division.
local-storage section.
1 n pic 99 value 0.
1 i pic 9999.
1 a pic X(99).
procedure division.

*> Printing
display "Hello, World!"

*> Looping
perform 10 times
display n(2- function log10(n):)
add 1 to n
end-perform.

*> Accessing arguments
accept i from argument-number
perform i times
accept a from argument-value
display a
end-perform.
end-program.

'''

[Crystal]
size    = '201 MiB'
version = '1.7.2'
website = 'https://crystal-lang.org'
example = '''
# Printing
puts "Hello, World!"

# Looping
(0..9).each do |i|
    puts i
end

# Accessing arguments
ARGV.each do |arg|
    puts arg
end
'''

[D]
size    = '293 MiB'
version = 'D 2.100.1 on LDC 1.30.0'
website = 'https://dlang.org'
example = '''
import std.stdio;

void main(string[] argv) {
    // Printing
    writeln("Hello, World!");

    // Looping
    foreach (i; 0 .. 10) {
        writeln(i);
    }

    // Accessing arguments
    foreach (arg; argv[1 .. $]) {
        writeln(arg);
    }
}
'''

[Dart]
size    = '529 MiB'
version = '2.18.6'
website = 'https://dart.dev'
example = '''
void main(List<String> argv) {
  // Printing
  print("Hello, World!");

  // Looping
  for (var i = 0; i < 10; i++) {
    print(i);
  }

  // Accessing arguments
  for (final arg in argv) {
    print(arg);
  }
}
'''

[Elixir]
size    = '168 MiB'
version = '1.14.3'
website = 'https://elixir-lang.org'
example = '''
# Printing
IO.puts "Hello, World!"

# Looping
for i <- 0..9, do: IO.puts i

# Accessing arguments
for arg <- System.argv, do: IO.puts arg
'''

['F#']
size    = '150 MiB'
version = 'F# 7.0 on .NET 7.0.2'
website = 'https://fsharp.org'
example = '''
[<EntryPoint>]
let main args =
    // Printing
    printfn "Hello, World!"

    // Looping
    for i in 0..9 do
        printfn "%d" i

    // Accessing arguments
    for arg in args do
        printfn "%s" arg

    0
'''

[Fortran]
size    = '85.6 MiB'
version = 'GNU Fortran 12.2.0'
website = 'https://gcc.gnu.org/fortran/'
example = '''
character(len=32) :: s
integer :: i

! Printing
print "(a)", "Hello, World!"

! Looping
do i = 0, 9
    print "(i0)", i
end do

! Accessing arguments
! (NOTE: getarg() and iargc() are GNU Fortran extensions)
do i = 1, iargc()
    call getarg(i,s)
    print "(a)", s
end do

end
'''

[Go]
size    = '150 MiB'
version = '1.19.5'
website = 'https://go.dev'
example = '''
package main

import (
    "fmt"
    "os"
)

func main() {
    // Printing
    fmt.Println("Hello, World!")

    // Looping
    for i := 0; i < 10; i++ {
        fmt.Println(i)
    }

    // Accessing arguments
    for _, arg := range os.Args[1:] {
        fmt.Println(arg)
    }
}
'''

[GolfScript]
size    = '24.2 MiB'
version = '6155e9f'
website = 'http://www.golfscript.com/golfscript/'
example = '''
# Printing
"Hello, World!"puts

# Looping
10,{p}/

# The stack is initialized with one element, an array of arguments:
n*
'''

[Haskell]
size    = '310 MiB'
version = 'Glasgow Haskell Compiler 9.0.2'
website = 'https://www.haskell.org/ghc/'
example = '''
import System.Environment

main = do
  -- Printing
  putStrLn "Hello, World!"

  -- Looping
  mapM print [0..9]

  -- Accessing arguments
  args <- tail <$> getArgs
  mapM putStrLn args
'''

[Hexagony]
size    = '28 MiB'
version = '770406a'
website = 'https://github.com/SirBogman/Hexagony'
example = '''
          \ P r i n t i n g .
         \ H ; e ; l ; ; o ; \
        / o ; W ; 0 P ; 2 Q < .
       . > ; r ; l ; d ; P 1 ; \
      > * . . . . . . . . . . < .
     . . . . . . . . . . . . . . .
    . . L o o p i n g . . . . . . .
   \ 1 0 ; " $ / } ! ) " ; \ . . . .
  . . . . . . . > . - " = < . . . . .
 . / . . . . . < . . . . . . . . . . .
  . . . . . . . . . . . . . . . . . .
   . . . A c c e s s i n g . . . . .
    . . . A r g u m e n t s . . . .
     . . . . . . > \ . @ . . . . .
      . > $ > , < \ ) < . . . . .
       . . \ . ; / $ 0 / . . . .
        . A r g u m e n t s . .
         . a r e . N U L L . .
          t e r m i n a t e d
'''

[J]
size    = '4.84 MiB'
version = '9.02.08'
website = 'https://www.jsoftware.com'
example = '''
NB.Printing
echo'Hello, World!'

NB.Looping
echo i.10 1

NB.Accessing arguments
echo each 2}.ARGV
'''

[Java]
size    = '51.1 MiB'
version = '17.0.1'
website = 'https://openjdk.java.net'
example = '''
class Main {
    public static void main(String[] args) {
        // Printing
        System.out.println("Hello, World!");

        // Looping
        for (int i = 0; i < 10; i++)
            System.out.println(i);

        // Accessing arguments
        for (String arg : args)
            System.out.println(arg);
    }
}
'''

[JavaScript]
size    = '22.5 MiB'
version = 'V8 10.7.193.22'
website = 'https://v8.dev'
example = '''
// Printing
print("Hello, World!");

// Looping
for (let i = 0; i < 10; i++)
    print(i);

// Accessing arguments
for (let arg of arguments)
    print(arg);

// write() outputs without a newline.
'''

[Julia]
size    = '286 MiB'
version = '1.8.5'
website = 'https://julialang.org'
example = '''
# Printing
println("Hello, World!")

# Looping
for i=0:9
    println(i)
end

# Accessing arguments
for arg in ARGS
    println(arg)
end
'''

[K]
size    = '530 KiB'
version = '53b33a9f8b'
website = 'https://codeberg.org/ngn/k'
example = '''
/Printing
`0:"Hello, World!"

/Looping
`0:$!10

/Accessing arguments
`0:x
'''

[Lisp]
size    = '30.9 MiB'
version = 'GNU CLISP 2.49.92'
website = 'https://clisp.sourceforge.io'
example = '''
; Printing
(write-line "Hello, World!")

; Looping
(loop for i from 0 to 9
    do (format t "~d~%" i)
)

; Accessing Arguments
(loop for arg in *args*
    do (write-line arg)
)
'''

[Lua]
size    = '342 KiB'
version = '5.4.4'
website = 'https://www.lua.org'
example = '''
-- Printing
print("Hello, World!")

-- Looping
for i = 0, 9 do
    print(i)
end

-- Accessing arguments
for i = 1, #arg do
    print(arg[i])
end
'''

[Nim]
size    = '13.6 MiB'
version = '1.6.10'
website = 'https://nim-lang.org'
example = '''
import os

# Printing
echo "Hello, World!"

# Looping
for i in 0 .. 9:
    echo i

# Accessing arguments
for arg in commandLineParams():
    echo arg
'''

[OCaml]
size    = '99.1 MiB'
version = '5.0.0'
website = 'https://ocaml.org'
example = '''
(* Printing *)
print_endline "Hello, World!";

(* Looping *)
for i = 0 to 9 do
  Printf.printf "%d\n" i
done;

(* Accessing arguments *)
Sys.argv
  |> Array.to_list
  |> List.tl
  |> List.iter print_endline;
'''

[Pascal]
size    = '30.9 MiB'
version = '3.2.2'
website = 'https://freepascal.org'
example = '''
var
    i: integer;
begin
    { Printing }
    writeLn('Hello, World!');

    { Looping }
    for i := 0 to 9 do
        writeLn(i);

    { Accessing arguments }
    for i := 1 to argc - 1 do
        writeLn(argv[i]);
end.
'''

[Perl]
size    = '5.34 MiB'
version = '5.36.0'
website = 'https://www.perl.org'
example = '''
# Printing
say 'Hello, World!';

# Looping
say for 0..9;

# Accessing arguments
say for @ARGV;

# Code is run under -E, all current features are enabled.
'''

[PHP]
size    = '10.5 MiB'
version = '7.4.33'
website = 'https://www.php.net'
example = '''
# Printing
echo "Hello, World!\n";

# Looping
for ($i = 0; $i < 10; $i++)
    echo "$i\n";

# Accessing arguments
for ($i = 1; $i < $argc; $i++)
    echo "$argv[$i]\n";
'''

[PowerShell]
size    = '176 MiB'
version = 'PowerShell 7.3.2 on .NET 7.0.2'
website = 'https://docs.microsoft.com/powershell/scripting/overview'
example = '''
# Printing
Write-Host 'Hello, World!'

# Looping
ForEach ($i in 0..9) {
    Write-Host $i
}

# Accessing arguments
ForEach ($arg in $args) {
    Write-Host $arg
}
'''

[Prolog]
size    = '50.8 MiB'
version = 'SWI-Prolog 8.4.2'
website = 'https://www.swi-prolog.org'
example = '''
% Printing
:- writeln("Hello, World!").

% Looping
:- numlist(0, 9, List),
   maplist(writeln, List).

% Accessing arguments
:- prolog_flag(argv, Args),
   maplist(writeln, Args).
'''

[Python]
size    = '74 MiB'
version = '3.11.2'
website = 'https://www.python.org'
example = '''
import sys

# Printing
print('Hello, World!')

# Looping
for i in range(10):
    print(i)

# Accessing arguments
for arg in sys.argv[1:]:
    print(arg)
'''

[R]
size    = '76.4 MiB'
version = '4.2.2'
website = 'https://www.r-project.org'
example = '''
# Printing
write("Hello, World!", 1)

# Looping
for (i in 0:9) {
    write(i, 1)
}

# Accessing arguments
for (arg in commandArgs(TRUE)) {
    write(arg, 1)
}
'''

[Raku]
size    = '58.1 MiB'
version = 'Raku 6.d on Rakudo 2022.12'
website = 'https://raku.org'
example = '''
# Printing
say 'Hello, World!';

# Looping
.say for ^10;

# Accessing arguments
.say for @*ARGS;
'''

[Ruby]
size    = '24.1 MiB'
version = '3.2.1'
website = 'https://www.ruby-lang.org'
example = '''
# Printing
puts 'Hello, World!'

# Looping
(0..9).each do |i|
    puts i
end

# Accessing arguments
ARGV.each do |arg|
    puts arg
end
'''

[Rust]
size    = '431 MiB'
version = '1.67.1'
website = 'https://www.rust-lang.org'
example = '''
fn main() {
    // Printing
    println!("Hello, World!");

    // Looping
    for i in 0..10 {
        println!("{i}");
    }

    // Accessing arguments
    for arg in std::env::args().skip(1) {
        println!("{arg}");
    }
}
'''

[sed]
size    = '232 KiB'
version = '4.9'
website = 'https://www.gnu.org/software/sed/'
example = '''
# Printing
1i Hello, World!

# Looping
2,$ b

h
s/.*/0/
:loop
p
y/012345678/123456789/
/9/ !b loop
G

# Accessing arguments
# (... automatic, one per line ...)

# Arguments are available via STDIN,
# each argument is seperated with a null byte.
# The code is run with -E and -z options.
# Output replaces null bytes with newlines.
'''

[SQL]
size    = '1.11 MiB'
version = '3.40.1'
website = 'https://sqlite.org'
example = '''
-- Printing
SELECT 'Hello, World!';

-- Looping
WITH loop(i) AS (
    SELECT 0
    UNION ALL
    SELECT i + 1 FROM loop
    WHERE i < 9
)
SELECT i FROM loop;

-- Accessing arguments
SELECT arg FROM argv;

-- Only the first column of the first result set will be printed,
-- NULL values will be skipped, and the dialect is SQLite.
'''

[Swift]
size    = '494 MiB'
version = '5.7.3'
website = 'https://swift.org'
example = '''
// Printing
print("Hello, World!")

// Looping
for i in 0...9 {
    print(i)
}

// Accessing arguments
for arg in CommandLine.arguments[1...] {
    print(arg)
}
'''

[Tcl]
size    = '5.23 MiB'
version = '8.6.13'
website = 'https://www.tcl-lang.org'
example = '''
# Printing
puts "Hello, World!"

# Looping
for {set x 0} {$x < 10} {incr x} {
    puts $x
}

# Accessing arguments
foreach arg $argv {
    puts $arg
}
'''

[TeX]
experiment = 877
size       = '9.58 MiB'
version    = '3.141592653'
website    = 'https://tug.org'
example    = '''
% Printing
Hello, World!

% Looping
\newcount\i
\loop\ifnum\i<10
    \the\i\endgraf
    \advance\i by1
\repeat

% Accessing arguments
\newcount\j
\loop\ifnum\j<\argc\relax
    \argv\j\endgraf
    \advance\j by1
\repeat
'''

[V]
size    = '46.1 MiB'
version = '0.3.2'
website = 'https://vlang.io'
example = '''
import os

// Printing
println('Hello, World!')

// Looping
for i in 0..10 {
    println(i)
}

// Accessing arguments
for arg in os.args[1..] {
    println(arg)
}
'''

[VimL]
size    = '23.1 MiB'
version = '9.0'
website = 'https://www.vim.org'
example = '''
" Printing
i
Hello, World!
.

" Looping
for i in range(10)
    pu=i
endfo

" Accessing arguments
for a in args
    pu=a
endfo

" Make sure to save the file when you're done!
w
'''

[Wren]
size    = '484 KiB'
version = '0.4.0'
website = 'https://wren.io'
example = '''
import "os" for Process

// Printing
System.print("Hello, World!")

// Looping
for (i in 0..9) System.print(i)

// Accessing arguments
for (a in Process.arguments) System.print(a)
'''

[Zig]
size    = '262 MiB'
version = '0.10.1'
website = 'https://ziglang.org'
example = '''
const std = @import("std");

pub fn main() !void {
    const stdout = std.io.getStdOut().writer();

    // Printing
    try stdout.print("Hello, World!\n", .{});

    // Looping
    var i: i32 = 0;
    while (i < 10) : (i += 1)
        try stdout.print("{}\n", .{i});

    // Accessing arguments
    for (std.os.argv) |arg, index|
        if (index > 0)
            try stdout.print("{s}\n", .{arg});
}
'''

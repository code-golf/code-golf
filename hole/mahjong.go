package hole

import (
	"math/rand"
	"strings"
)

func mahjong() []Scorecard {

	complete_hands := []string{
		"🀊🀋🀌🀕🀕🀕🀖🀖🀗🀗🀘🀞🀟🀠",
		"🀄🀄🀄🀚🀚🀚🀞🀞🀞🀟🀟🀠🀠🀡",
		"🀌🀍🀎🀒🀒🀓🀔🀔🀔🀕🀕🀕🀖🀖",
		"🀅🀅🀅🀊🀊🀑🀒🀓🀖🀗🀘🀙🀚🀛",
		"🀄🀄🀇🀈🀉🀌🀍🀎🀔🀕🀕🀖🀖🀗",
		"🀃🀃🀃🀊🀋🀌🀒🀓🀔🀔🀕🀖🀙🀙",
		"🀁🀁🀉🀉🀉🀐🀐🀐🀓🀔🀕🀘🀘🀘",
		"🀇🀇🀇🀔🀔🀕🀕🀖🀖🀘🀘🀚🀛🀜",
		"🀀🀀🀉🀊🀋🀋🀌🀍🀍🀎🀏🀖🀖🀖",
		"🀉🀊🀋🀍🀍🀍🀓🀔🀕🀘🀘🀙🀙🀙",
		"🀀🀀🀄🀄🀈🀈🀒🀒🀔🀔🀖🀖🀛🀛",
		"🀊🀊🀋🀋🀌🀌🀐🀑🀒🀛🀛🀟🀠🀡",
		"🀅🀅🀉🀉🀉🀊🀊🀊🀍🀍🀍🀕🀖🀗",
		"🀑🀑🀒🀓🀔🀔🀔🀕🀕🀖🀖🀡🀡🀡",
		"🀈🀉🀊🀊🀋🀌🀎🀎🀎🀖🀗🀘🀡🀡",
		"🀀🀁🀂🀃🀄🀅🀆🀇🀏🀐🀘🀙🀡🀡",
		"🀋🀌🀍🀚🀛🀜🀞🀞🀟🀟🀟🀟🀠🀡",
		"🀄🀄🀈🀈🀈🀋🀌🀍🀍🀎🀏🀐🀐🀐",
		"🀊🀋🀌🀓🀓🀓🀖🀗🀘🀚🀛🀜🀡🀡",
		"🀋🀌🀍🀞🀞🀞🀟🀟🀟🀠🀠🀠🀡🀡",
		"🀅🀅🀅🀇🀇🀍🀎🀏🀕🀖🀖🀗🀗🀘",
		"🀊🀊🀊🀐🀐🀐🀔🀕🀖🀖🀗🀘🀘🀘",
		"🀇🀈🀉🀌🀌🀍🀎🀏🀘🀘🀘🀟🀠🀡",
		"🀇🀇🀉🀊🀋🀑🀒🀓🀖🀗🀘🀞🀞🀞",
		"🀉🀊🀋🀐🀐🀐🀛🀛🀛🀝🀞🀞🀞🀟",
		"🀀🀀🀀🀂🀂🀓🀔🀔🀕🀕🀕🀖🀖🀗",
		"🀈🀉🀊🀊🀊🀜🀜🀜🀟🀟🀠🀠🀡🀡",
		"🀑🀒🀓🀔🀕🀕🀖🀖🀖🀖🀗🀜🀝🀞",
		"🀅🀅🀌🀍🀎🀐🀑🀒🀖🀗🀘🀡🀡🀡",
		"🀋🀋🀎🀎🀐🀐🀒🀒🀓🀓🀛🀛🀠🀠",
		"🀃🀃🀈🀉🀊🀒🀓🀔🀛🀛🀛🀛🀜🀝",
		"🀃🀃🀅🀅🀍🀍🀕🀕🀘🀘🀠🀠🀡🀡",
		"🀃🀃🀕🀖🀗🀙🀚🀛🀛🀜🀜🀝🀝🀞",
		"🀀🀀🀀🀈🀉🀉🀊🀊🀋🀜🀝🀝🀝🀞",
		"🀀🀁🀂🀃🀄🀅🀆🀇🀏🀐🀘🀙🀡🀡",
		"🀊🀋🀌🀌🀌🀌🀒🀒🀕🀖🀗🀝🀞🀟",
		"🀂🀂🀄🀄🀈🀈🀉🀉🀐🀐🀔🀔🀘🀘",
		"🀀🀁🀂🀃🀄🀅🀆🀇🀏🀐🀘🀙🀡🀡",
		"🀉🀊🀋🀕🀖🀖🀖🀖🀗🀝🀝🀟🀠🀡",
		"🀀🀀🀅🀅🀊🀊🀍🀍🀏🀏🀖🀖🀟🀟",
		"🀀🀀🀂🀂🀆🀆🀘🀘🀞🀞🀠🀠🀡🀡",
		"🀃🀃🀇🀇🀊🀊🀏🀏🀑🀑🀕🀕🀞🀞",
		"🀊🀊🀊🀐🀑🀑🀑🀑🀒🀒🀓🀔🀠🀠",
		"🀈🀈🀏🀏🀏🀒🀒🀒🀔🀕🀖🀙🀚🀛",
		"🀈🀈🀑🀒🀓🀙🀚🀛🀞🀟🀠🀠🀠🀠",
		"🀇🀈🀈🀉🀉🀊🀐🀑🀒🀒🀒🀒🀘🀘",
		"🀊🀊🀊🀒🀓🀓🀔🀔🀔🀔🀕🀜🀝🀞",
		"🀊🀊🀊🀌🀍🀎🀐🀐🀐🀔🀔🀗🀗🀗",
		"🀇🀈🀉🀋🀌🀍🀐🀐🀕🀕🀕🀛🀜🀝",
		"🀀🀁🀂🀃🀄🀅🀆🀆🀇🀏🀐🀘🀙🀡",
	}
	incomplete_hands := []string{
		"🀊🀋🀌🀕🀕🀖🀖🀗🀗🀘🀜🀞🀟🀠",
		"🀄🀄🀄🀕🀚🀚🀚🀞🀞🀟🀟🀠🀠🀡",
		"🀌🀌🀍🀎🀒🀓🀔🀔🀔🀕🀕🀕🀖🀖",
		"🀅🀅🀅🀊🀊🀑🀒🀓🀕🀖🀗🀘🀙🀚",
		"🀁🀄🀄🀇🀈🀉🀌🀍🀔🀕🀕🀖🀖🀗",
		"🀃🀃🀃🀋🀌🀒🀓🀔🀔🀕🀖🀗🀙🀙",
		"🀁🀁🀉🀉🀐🀐🀐🀓🀔🀕🀕🀘🀘🀘",
		"🀇🀇🀇🀒🀔🀔🀕🀖🀖🀘🀘🀚🀛🀜",
		"🀀🀉🀊🀋🀋🀌🀍🀍🀎🀏🀖🀖🀖🀞",
		"🀉🀊🀋🀍🀍🀍🀑🀔🀕🀘🀘🀙🀙🀙",
		"🀀🀀🀄🀄🀈🀐🀒🀒🀔🀔🀖🀖🀛🀛",
		"🀊🀊🀋🀋🀌🀌🀑🀒🀛🀛🀟🀟🀠🀡",
		"🀃🀅🀅🀉🀉🀉🀊🀊🀊🀍🀍🀕🀖🀗",
		"🀊🀑🀑🀒🀓🀔🀔🀔🀕🀕🀖🀡🀡🀡",
		"🀈🀉🀊🀊🀋🀎🀎🀎🀏🀖🀗🀘🀡🀡",
		"🀀🀁🀃🀃🀄🀅🀆🀇🀏🀐🀘🀙🀡🀡",
		"🀌🀍🀔🀚🀛🀜🀞🀞🀟🀟🀟🀟🀠🀡",
		"🀂🀄🀄🀈🀈🀈🀋🀌🀍🀍🀏🀐🀐🀐",
		"🀅🀊🀋🀌🀓🀓🀓🀖🀗🀘🀚🀛🀜🀡",
		"🀋🀌🀍🀕🀞🀞🀞🀟🀟🀟🀠🀠🀠🀡",
		"🀅🀅🀅🀇🀇🀍🀎🀎🀏🀕🀖🀗🀗🀘",
		"🀊🀊🀐🀐🀐🀐🀔🀕🀖🀖🀗🀘🀘🀘",
		"🀇🀈🀉🀌🀌🀎🀏🀘🀘🀘🀙🀟🀠🀡",
		"🀇🀇🀉🀊🀋🀑🀒🀓🀖🀗🀘🀘🀞🀞",
		"🀉🀊🀊🀋🀐🀐🀛🀛🀛🀝🀞🀞🀞🀟",
		"🀀🀀🀀🀂🀂🀓🀔🀕🀕🀕🀖🀖🀗🀟",
		"🀈🀉🀊🀊🀖🀜🀜🀜🀟🀟🀠🀠🀡🀡",
		"🀑🀒🀒🀓🀕🀕🀖🀖🀖🀖🀗🀜🀝🀞",
		"🀅🀅🀌🀎🀐🀐🀑🀒🀖🀗🀘🀡🀡🀡",
		"🀋🀋🀌🀎🀎🀐🀐🀒🀒🀓🀓🀛🀛🀠",
		"🀃🀈🀉🀊🀋🀒🀓🀔🀛🀛🀛🀛🀜🀝",
		"🀃🀃🀅🀅🀌🀍🀍🀕🀕🀘🀘🀠🀠🀡",
		"🀃🀕🀖🀗🀗🀙🀚🀛🀛🀜🀜🀝🀝🀞",
		"🀀🀀🀈🀉🀉🀊🀊🀋🀋🀜🀝🀝🀝🀞",
		"🀀🀁🀂🀃🀄🀅🀆🀇🀏🀐🀑🀘🀡🀡",
		"🀅🀊🀋🀌🀌🀌🀒🀒🀕🀖🀗🀝🀞🀟",
		"🀂🀂🀄🀄🀈🀈🀉🀉🀉🀐🀐🀔🀔🀘",
		"🀀🀁🀃🀄🀅🀆🀇🀏🀐🀒🀘🀙🀡🀡",
		"🀉🀊🀋🀕🀖🀖🀖🀖🀗🀘🀝🀟🀠🀡",
		"🀀🀅🀅🀊🀊🀍🀍🀏🀏🀓🀖🀖🀟🀟",
		"🀀🀀🀂🀂🀆🀆🀔🀘🀞🀞🀠🀠🀡🀡",
		"🀂🀃🀃🀇🀇🀊🀊🀏🀑🀑🀕🀕🀞🀞",
		"🀊🀊🀊🀐🀑🀑🀑🀒🀒🀓🀔🀗🀠🀠",
		"🀀🀈🀈🀏🀏🀏🀒🀒🀒🀕🀖🀙🀚🀛",
		"🀀🀈🀈🀑🀒🀓🀙🀚🀛🀟🀠🀠🀠🀠",
		"🀆🀇🀈🀈🀉🀉🀊🀐🀑🀒🀒🀒🀘🀘",
		"🀊🀊🀊🀍🀒🀓🀓🀔🀔🀔🀔🀕🀜🀞",
		"🀃🀊🀊🀊🀌🀍🀎🀐🀐🀐🀔🀗🀗🀗",
		"🀇🀈🀉🀋🀌🀍🀍🀐🀐🀕🀕🀕🀜🀝",
		"🀀🀁🀂🀃🀄🀆🀆🀇🀇🀏🀐🀘🀙🀡",
		"🀃🀊🀋🀌🀕🀕🀕🀖🀗🀗🀘🀝🀞🀟",
		"🀂🀄🀄🀄🀅🀚🀚🀞🀞🀞🀟🀠🀠🀡",
		"🀍🀎🀒🀒🀓🀓🀔🀔🀕🀕🀕🀖🀖🀞",
		"🀃🀅🀅🀊🀊🀑🀒🀓🀖🀗🀘🀙🀚🀛",
		"🀄🀇🀉🀋🀌🀍🀎🀎🀔🀕🀕🀖🀖🀗",
		"🀃🀅🀈🀊🀋🀌🀒🀓🀔🀔🀕🀖🀙🀙",
		"🀁🀁🀆🀉🀉🀉🀐🀐🀓🀔🀘🀘🀘🀜",
		"🀀🀃🀇🀇🀔🀔🀕🀖🀖🀘🀘🀚🀛🀜",
		"🀀🀀🀉🀊🀋🀋🀍🀍🀍🀎🀏🀖🀖🀖",
		"🀉🀊🀋🀍🀍🀓🀓🀔🀖🀘🀘🀙🀙🀙",
		"🀀🀀🀀🀄🀄🀈🀈🀒🀔🀔🀖🀖🀗🀛",
		"🀊🀊🀋🀋🀌🀌🀐🀚🀛🀛🀛🀟🀠🀡",
		"🀅🀆🀉🀉🀉🀊🀊🀊🀍🀍🀕🀕🀖🀗",
		"🀀🀐🀑🀑🀒🀓🀔🀔🀔🀕🀕🀡🀡🀡",
		"🀈🀉🀉🀊🀊🀌🀎🀎🀎🀐🀖🀘🀡🀡",
		"🀀🀁🀂🀃🀅🀇🀉🀏🀐🀐🀘🀙🀡🀡",
		"🀉🀋🀌🀗🀚🀛🀜🀞🀞🀟🀟🀟🀠🀡",
		"🀄🀄🀈🀈🀋🀌🀌🀍🀎🀏🀐🀐🀐🀗",
		"🀊🀊🀋🀌🀓🀖🀗🀘🀚🀛🀛🀜🀡🀡",
		"🀈🀉🀌🀍🀞🀞🀞🀟🀟🀠🀠🀠🀡🀡",
		"🀅🀅🀅🀇🀇🀍🀎🀏🀕🀖🀖🀗🀘🀛",
		"🀊🀊🀊🀏🀐🀐🀔🀕🀖🀗🀗🀘🀘🀘",
		"🀁🀇🀈🀉🀉🀌🀍🀏🀘🀘🀘🀟🀠🀡",
		"🀃🀅🀇🀇🀉🀊🀋🀑🀒🀖🀗🀘🀞🀞",
		"🀉🀊🀐🀐🀔🀕🀛🀛🀛🀝🀞🀞🀞🀟",
		"🀀🀀🀂🀓🀔🀔🀕🀕🀕🀖🀖🀗🀗🀝",
		"🀆🀈🀉🀊🀊🀍🀜🀜🀟🀟🀠🀠🀡🀡",
		"🀏🀑🀒🀓🀔🀕🀕🀖🀖🀖🀖🀗🀜🀞",
		"🀃🀅🀅🀇🀍🀎🀐🀑🀒🀖🀗🀡🀡🀡",
		"🀋🀋🀎🀐🀐🀒🀒🀓🀓🀘🀙🀛🀛🀠",
		"🀁🀃🀃🀈🀉🀒🀓🀓🀔🀛🀛🀛🀜🀝",
		"🀃🀃🀅🀍🀐🀕🀕🀘🀘🀜🀠🀠🀡🀡",
		"🀃🀃🀄🀖🀗🀙🀚🀛🀛🀛🀜🀝🀝🀞",
		"🀀🀀🀀🀄🀈🀈🀉🀊🀊🀋🀜🀝🀝🀞",
		"🀀🀀🀁🀂🀃🀄🀆🀇🀏🀐🀒🀘🀡🀡",
		"🀊🀌🀌🀌🀌🀎🀑🀒🀒🀖🀗🀝🀞🀟",
		"🀂🀂🀃🀄🀈🀈🀉🀉🀏🀐🀔🀔🀘🀘",
		"🀀🀂🀃🀄🀅🀆🀇🀉🀉🀏🀐🀘🀙🀡",
		"🀉🀊🀋🀏🀕🀖🀖🀗🀘🀝🀝🀟🀠🀡",
		"🀀🀁🀅🀅🀆🀊🀊🀍🀍🀏🀏🀖🀖🀟",
		"🀀🀀🀂🀂🀆🀆🀋🀘🀜🀞🀞🀠🀡🀡",
		"🀃🀃🀇🀉🀊🀊🀏🀏🀑🀑🀕🀕🀗🀞",
		"🀊🀊🀐🀑🀑🀑🀑🀒🀓🀔🀙🀚🀠🀠",
		"🀈🀈🀏🀏🀏🀐🀒🀒🀕🀕🀖🀙🀚🀛",
		"🀂🀆🀈🀈🀑🀒🀓🀚🀞🀟🀠🀠🀠🀠",
		"🀇🀈🀉🀉🀉🀎🀐🀑🀒🀒🀒🀒🀘🀘",
		"🀁🀊🀊🀒🀓🀓🀔🀔🀔🀔🀕🀜🀝🀡",
		"🀇🀊🀊🀊🀌🀍🀎🀐🀐🀑🀔🀗🀗🀗",
		"🀇🀈🀉🀋🀌🀍🀎🀎🀐🀐🀕🀕🀕🀛",
		"🀁🀂🀃🀄🀅🀆🀇🀉🀏🀐🀔🀘🀙🀡",
		"🀊🀋🀌🀔🀕🀕🀕🀖🀖🀗🀗🀗🀘🀞",
		"🀄🀄🀄🀚🀜🀞🀞🀟🀟🀟🀠🀠🀠🀡",
		"🀀🀂🀍🀎🀑🀒🀓🀔🀔🀕🀕🀕🀖🀖",
		"🀅🀅🀆🀊🀊🀎🀑🀒🀓🀖🀘🀙🀚🀛",
		"🀄🀄🀇🀈🀌🀍🀎🀓🀕🀕🀖🀗🀚🀡",
		"🀀🀃🀃🀄🀊🀋🀌🀓🀔🀔🀕🀖🀙🀙",
		"🀁🀁🀉🀉🀉🀊🀐🀐🀐🀓🀘🀘🀙🀞",
		"🀇🀇🀇🀓🀔🀔🀕🀖🀖🀘🀘🀛🀛🀜",
		"🀀🀇🀉🀋🀋🀌🀍🀍🀎🀏🀒🀖🀖🀠",
		"🀂🀊🀋🀍🀍🀍🀎🀐🀓🀔🀕🀘🀘🀙",
		"🀀🀀🀆🀈🀈🀈🀒🀒🀔🀔🀖🀛🀛🀟",
		"🀊🀋🀋🀌🀐🀑🀒🀗🀘🀛🀛🀟🀡🀡",
		"🀅🀉🀉🀉🀊🀊🀊🀋🀋🀍🀍🀕🀖🀗",
		"🀅🀐🀑🀑🀓🀔🀕🀕🀖🀖🀖🀡🀡🀡",
		"🀇🀈🀉🀊🀊🀋🀎🀎🀎🀕🀗🀘🀡🀡",
		"🀁🀂🀃🀆🀇🀏🀐🀐🀒🀘🀙🀞🀡🀡",
		"🀋🀌🀗🀚🀛🀜🀞🀞🀟🀟🀟🀠🀡🀡",
		"🀃🀄🀈🀈🀈🀌🀍🀍🀎🀐🀐🀐🀖🀙",
		"🀂🀄🀆🀊🀋🀓🀓🀓🀗🀘🀛🀜🀡🀡",
		"🀇🀊🀋🀍🀕🀞🀞🀞🀟🀟🀠🀠🀠🀡",
		"🀁🀅🀅🀅🀅🀇🀇🀕🀖🀖🀗🀗🀘🀙",
		"🀊🀊🀊🀐🀐🀒🀒🀔🀕🀖🀘🀘🀘🀚",
		"🀂🀇🀇🀈🀌🀌🀎🀕🀘🀘🀘🀟🀠🀡",
		"🀇🀇🀉🀉🀊🀋🀌🀑🀒🀖🀘🀙🀞🀞",
		"🀉🀋🀋🀌🀐🀐🀐🀚🀛🀛🀝🀞🀞🀟",
		"🀀🀀🀀🀂🀅🀓🀔🀔🀕🀕🀕🀖🀗🀘",
		"🀈🀉🀊🀊🀊🀘🀚🀜🀜🀟🀠🀠🀠🀡",
		"🀊🀑🀒🀔🀔🀕🀕🀖🀖🀖🀖🀜🀝🀞",
		"🀃🀅🀅🀌🀍🀎🀐🀑🀒🀖🀘🀟🀡🀡",
		"🀈🀋🀋🀌🀎🀎🀏🀐🀒🀒🀓🀛🀛🀠",
		"🀃🀃🀈🀉🀊🀌🀓🀔🀘🀛🀛🀛🀜🀜",
		"🀃🀃🀅🀍🀍🀕🀘🀘🀠🀠🀠🀠🀡🀡",
		"🀃🀃🀈🀈🀕🀖🀙🀚🀛🀛🀜🀜🀝🀟",
		"🀀🀀🀉🀉🀊🀋🀎🀔🀜🀝🀝🀝🀞🀡",
		"🀀🀂🀃🀄🀅🀆🀏🀏🀓🀘🀙🀟🀡🀡",
		"🀊🀊🀋🀌🀌🀒🀒🀕🀖🀖🀗🀘🀝🀟",
		"🀂🀂🀄🀈🀉🀐🀐🀔🀔🀘🀘🀘🀜🀞",
		"🀁🀂🀃🀄🀅🀅🀆🀇🀉🀍🀘🀙🀡🀡",
		"🀂🀆🀉🀊🀋🀖🀖🀖🀗🀗🀝🀟🀠🀡",
		"🀀🀀🀃🀅🀊🀊🀋🀍🀍🀏🀏🀖🀗🀟",
		"🀀🀀🀂🀆🀆🀗🀘🀘🀞🀟🀠🀠🀡🀡",
		"🀃🀅🀇🀇🀊🀊🀏🀏🀑🀕🀕🀕🀞🀟",
		"🀆🀊🀊🀊🀑🀑🀑🀑🀒🀒🀓🀝🀠🀠",
		"🀀🀈🀈🀏🀏🀒🀒🀔🀔🀖🀖🀙🀚🀛",
		"🀈🀈🀍🀓🀙🀙🀙🀛🀞🀟🀠🀠🀠🀠",
		"🀁🀇🀈🀈🀊🀑🀒🀒🀒🀒🀘🀘🀘🀞",
		"🀊🀊🀊🀍🀓🀓🀔🀔🀔🀕🀗🀚🀜🀝",
		"🀁🀇🀊🀊🀊🀌🀍🀎🀐🀐🀑🀔🀗🀗",
		"🀇🀉🀌🀍🀐🀐🀓🀕🀕🀕🀕🀙🀛🀝",
		"🀀🀁🀃🀄🀅🀆🀇🀊🀏🀐🀖🀘🀙🀡",
	}

	scorecards := make([]Scorecard, 5)

	for scorecardNum, _ := range scorecards {
		tests := append(append([]string{}, complete_hands...), incomplete_hands...)
		testValidity := make([]bool, len(complete_hands) + len(incomplete_hands))

		for i := 0; i < len(complete_hands); i++ {
			testValidity[i] = true
		}

		for i := len(complete_hands); i < len(testValidity); i++ {
			testValidity[i] = false
		}

		rand.Shuffle(len(tests), func(i, j int) {
			tests[i], tests[j] = tests[j], tests[i]
			testValidity[i], testValidity[j] = testValidity[j], testValidity[i]
		})

		args := make([]string, len(tests))
		var answer strings.Builder

		for i, t := range tests {
			runes := []rune(t)
			rand.Shuffle(len(runes), func(i, j int) {
		        runes[i], runes[j] = runes[j], runes[i]
		    })
			args[i] = string(runes)

			if testValidity[i] {
				if answer.Len() > 0 {
					answer.WriteByte('\n')
				}
				answer.WriteString(string(runes))
			}
		}

		scorecards[scorecardNum] = Scorecard{Args: args, Answer: answer.String()}
	}

	return scorecards
}

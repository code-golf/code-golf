#!/usr/bin/env perl6

use HTTP::Tiny;
use TOML::Thumb;

constant %paths = (
    'BASIC'      => 'FreeBASIC',
    'C'          => 'Tiny_C_Compiler',
    'C#'         => 'C_Sharp_(programming_language)',
    'C++'        => 'Clang',
    'COBOL'      => 'GnuCOBOL',
    'Crystal'    => 'Crystal_(programming_language)',
    'D'          => 'D_(programming_language)',
    'Dart'       => 'Dart_(programming_language)',
    'Elixir'     => 'Elixir_(programming_language)',
    'F#'         => 'F_Sharp_(programming_language)',
    'Fortran'    => 'GNU_Fortran',
    'Go'         => 'Go_(programming_language)',
    'Haskell'    => 'Glasgow_Haskell_Compiler',
    'Java'       => 'Java_Development_Kit',
    'JavaScript' => 'V8_(JavaScript_engine)',
    'Julia'      => 'Julia_(programming_language)',
    'Lisp'       => 'CLISP',
    'Lua'        => 'Lua_(programming_language)',
    'Nim'        => 'Nim_(programming_language)',
    'OCaml'      => 'OCaml',
    'PHP'        => 'PHP',
    'Pascal'     => 'Free_Pascal',
    'Perl'       => 'Perl',
    'PowerShell' => 'PowerShell',
    'Prolog'     => 'SWI-Prolog',
    'Python'     => 'Python_(programming_language)',
    'R'          => 'R_(programming_language)',
    'Raku'       => 'Rakudo',
    'Ruby'       => 'Ruby_(programming_language)',
    'Rust'       => 'Rust_(programming_language)',
    'SQL'        => 'SQLite',
    'Swift'      => 'Swift_(programming_language)',
    'Tcl'        => 'Tcl',
    'TeX'        => 'TeX',
    'VimL'       => 'Vim_(text_editor)',
    'Zig'        => 'Zig_(programming_language)',
);

my %langs = from-toml 'config/langs.toml'.IO;

for %langs.sort: *.key.fc -> (:key($name), :value(%lang)) {
    my $new;
    if my $path = %paths{$name} {
        state $ua = HTTP::Tiny.new :throw-exceptions;

        $new = $ua.get("https://en.wikipedia.org/wiki/$path")<content>.decode ~~ /
            < Stable Preview > ' release' .+? '>' ( '#' \d+ ' "' )?
            <(\d+ <[\d.]>+)>
        /;
    }

    my $old = %lang<version> ~~ / <[\d.]>+ \d+ /;
    $new //= '?';

    printf "%11s \e[%dm%11s â†’ %s\e[0m\n",
        $name,
           $new eq '?'                               ?? 33
        !! $old eq $new || $old.starts-with("$new.") ?? 32
        !!                                              31,
        $old, $new;
}

#!/usr/bin/env perl6

use HTTP::Tiny;
use TOML::Thumb;

constant @urls = (
    'AWK'        => 'AWK',
    'Bash'       => 'Bash_(Unix_shell)',
    'BASIC'      => 'FreeBASIC',
    'C'          => 'Tiny_C_Compiler',
    'C#'         => 'C_Sharp_(programming_language)',
    'COBOL'      => 'GnuCOBOL',
    'Crystal'    => 'Crystal_(programming_language)',
    'D'          => 'D_(programming_language)',
    'Dart'       => 'Dart_(programming_language)',
    'Elixir'     => 'Elixir_(programming_language)',
    'F#'         => 'F_Sharp_(programming_language)',
    'Fortran'    => 'GNU_Fortran',
    'Go'         => 'Go_(programming_language)',
    'Haskell'    => 'Glasgow_Haskell_Compiler',
    'Java'       => 'Java_Development_Kit',
    'JavaScript' => 'V8_(JavaScript_engine)',
    'Julia'      => 'Julia_(programming_language)',
    'Lisp'       => 'CLISP',
    'Lua'        => 'Lua_(programming_language)',
    'Nim'        => 'Nim_(programming_language)',
    'PHP'        => 'PHP',
    'Pascal'     => 'Free_Pascal',
    'Perl'       => 'Perl',
    'PowerShell' => 'PowerShell',
    'Prolog'     => 'SWI-Prolog',
    'Python'     => 'Python_(programming_language)',
    'Raku'       => 'Rakudo',
    'Ruby'       => 'Ruby_(programming_language)',
    'Rust'       => 'Rust_(programming_language)',
    'SQL'        => 'SQLite',
    'Swift'      => 'Swift_(programming_language)',
    'Tcl'        => 'Tcl',
    'VimL'       => 'Vim_(text_editor)',
    'Zig'        => 'Zig_(programming_language)',
);

my %langs = from-toml 'config/langs.toml'.IO;

for @urls -> (:key($lang), :value($path)) {
    state $ua = HTTP::Tiny.new :throw-exceptions;

    my $old = %langs{$lang}<version> ~~ / <[\d.]>+ \d+ /;
    my $new = $ua.get("https://en.wikipedia.org/wiki/$path")<content>.decode
        ~~ / < Stable Preview > ' release' .+? '>' ( '#' \d+ ' "' )? <(<[\d.]>+)> /;

    printf " %*s %s → %s\n", INIT { @urls».key».chars.max }, $lang, $old, $new
        unless $old eq $new or $old.starts-with("$new.");
}

#!/usr/bin/env raku

use HTTP::Tiny;
use JSON::Fast;
use TOML::Thumb;

constant %paths = (
    'Arturo'       => 'github.com/arturo-lang/arturo/releases/latest',
    'Assembly'     => 'registry.npmjs.org/@defasm/core/latest',
    'BASIC'        => 'en.wikipedia.org/wiki/FreeBASIC',
    'Berry'        => 'github.com/berry-lang/berry/releases/latest',
    'C'            => 'en.wikipedia.org/wiki/Tiny_C_Compiler',
    'C#'           => 'en.wikipedia.org/wiki/C_Sharp_(programming_language)',
    'C++'          => 'en.wikipedia.org/wiki/Clang',
    'COBOL'        => 'en.wikipedia.org/wiki/GnuCOBOL',
    'Coconut'      => 'github.com/evhub/coconut/releases/latest',
    'CoffeeScript' => 'registry.npmjs.org/coffeescript/latest',
    'Clojure'      => 'github.com/babashka/babashka/releases/latest',
    'Civet'        => 'registry.npmjs.org/@danielx/civet/latest',
    'Crystal'      => 'github.com/crystal-lang/crystal/releases/latest',
    'D'            => 'en.wikipedia.org/wiki/D_(programming_language)',
    'Dart'         => 'en.wikipedia.org/wiki/Dart_(programming_language)',
    'Elixir'       => 'en.wikipedia.org/wiki/Elixir_(programming_language)',
    'F#'           => 'en.wikipedia.org/wiki/F_Sharp_(programming_language)',
    'Factor'       => 'github.com/factor/factor/releases/latest',
    'Forth'        => 'en.wikipedia.org/wiki/Gforth',
    'Fortran'      => 'en.wikipedia.org/wiki/GNU_Fortran',
    'Go'           => 'endoflife.date/api/go.json',
    'Haskell'      => 'en.wikipedia.org/wiki/Glasgow_Haskell_Compiler',
    'Janet'        => 'github.com/janet-lang/janet/releases/latest',
    'Java'         => 'endoflife.date/api/java.json',
    'JavaScript'   => 'en.wikipedia.org/wiki/V8_(JavaScript_engine)',
    'jq'           => 'github.com/jqlang/jq/releases/latest',
    'Julia'        => 'en.wikipedia.org/wiki/Julia_(programming_language)',
    'Lisp'         => 'en.wikipedia.org/wiki/CLISP',
    'Lua'          => 'en.wikipedia.org/wiki/Lua_(programming_language)',
    'Nim'          => 'en.wikipedia.org/wiki/Nim_(programming_language)',
    'OCaml'        => 'en.wikipedia.org/wiki/OCaml',
    'Pascal'       => 'en.wikipedia.org/wiki/Free_Pascal',
    'Perl'         => 'endoflife.date/api/perl.json',
    'PHP'          => 'endoflife.date/api/php.json',
    'PowerShell'   => 'endoflife.date/api/powershell.json',
    'Prolog'       => 'en.wikipedia.org/wiki/SWI-Prolog',
    'Python'       => 'endoflife.date/api/python.json',
    'R'            => 'en.wikipedia.org/wiki/R_(programming_language)',
    'Raku'         => 'en.wikipedia.org/wiki/Rakudo',
    'Rebol'        => 'en.wikipedia.org/wiki/Rebol',
    'Rexx'         => 'en.wikipedia.org/wiki/Rexx',
    'Ruby'         => 'endoflife.date/api/ruby.json',
    'Rust'         => 'en.wikipedia.org/wiki/Rust_(programming_language)',
    'SQL'          => 'en.wikipedia.org/wiki/SQLite',
    'Swift'        => 'en.wikipedia.org/wiki/Swift_(programming_language)',
    'Tcl'          => 'en.wikipedia.org/wiki/Tcl',
    'TeX'          => 'en.wikipedia.org/wiki/TeX',
    'Uiua'         => 'github.com/uiua-lang/uiua/releases/latest',
    'V'            => 'github.com/vlang/v/releases/latest',
    'VimL'         => 'en.wikipedia.org/wiki/Vim_(text_editor)',
    'Wren'         => 'github.com/wren-lang/wren/releases/latest',
    'Zig'          => 'en.wikipedia.org/wiki/Zig_(programming_language)',
);

my %langs = from-toml 'config/data/langs.toml'.IO;

for %langs.sort: *.key.fc -> (:key($name), :value(%lang)) {
    my $old = %lang<version> ~~ / <[\d.]>+ \d+ /;
    my $new = do with %paths{$name} {
        state $ua  = HTTP::Tiny.new :throw-exceptions;
        my    $res = $ua.get("https://$_")<content>.decode;

        when / 'endoflife' / { $res.&from-json[0]<latest> }
        when / 'github'    / { $res ~~ / [ $name || 'Release' ] ' ' v? <(\d+ <[\d.]>+)> / }
        when / 'npmjs'     / { $res.&from-json[0]<version> }
        when / 'wikipedia' / {
            $res ~~ /
                < Stable Preview > ' release' .+? '>' ( '#' \d+ ' "' )?
                <(\d+ <[\d.]>+)>
            /;
        }
    } // '?';

    my $code =  $new eq '?'                                              ?? 33
        !! $old eq $new || $old.starts-with("$new.") || "$old.0" eq $new ?? 32
        !!                                                                  31;

    printf "%12s \e[%dm%11s â†’ %s\e[0m\n", $name, $code, $old, $new;
}

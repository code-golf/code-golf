['><>']
size    = '473 KiB'
version = '44b227e'
website = '//github.com/primo-ppcg/fish-jit'
example = '''
\ printing
> "!dlroW ,olleH" ooooooooooooo ao 03.
  looping
> 0 v
    >:nao 1+ :9)?v
v               ~<
  accessing arguments
> i : ?!v : 0) ?v ~;
        a
        o       o
        ~
^       <       <
'''

[Bash]
size    = '1.15 MiB'
version = '5.1.4'
website = '//www.gnu.org/software/bash/'
example = '''
# Printing
echo Hello, World!

# Looping
for i in {0..9}; do
    echo $i;
done

# Accessing arguments
for arg; do
    echo $arg;
done
'''

[brainfuck]
size    = '1.62 MiB'
version = '1.0.0'
website = '//github.com/code-golf/code-golf/tree/master/langs/brainfuck/'
example = '''
>>Printing
+[-->-[>>+>-----<<]<--<---]>-.>>>+.>>..+++[.>]<<<<.+++.------.<<-.>>>>+.[<->-]<-.>

>>Looping
++++++++[>++++++<-]
++++++++++[>.+>++++++++++.[-]<<-]

>>Accessing arguments
,[
    [
        .[-],
    ]
    ++++++++++.
    [-],
]
'''

[C]
size    = '1.61 MiB'
version = 'Tiny C Compiler 0.9.27'
website = '//bellard.org/tcc/'
example = '''
#include <stdio.h>

int main(int argc, char* argv[]) {
    // Printing
    puts("Hello, World!");

    // Looping
    for (int i = 0; i < 10; i++)
        printf("%d\n", i);

    // Accessing arguments
    for (int i = 1; i < argc; i++)
        puts(argv[i]);

    return 0;
}
'''

['C#']
size    = '129 MiB'
version = 'C# 9.0 on .NET 5.0.4'
website = '//docs.microsoft.com/dotnet/csharp/'
example = '''
using System;

// Printing
Console.WriteLine("Hello, World!");

// Looping
for (int i = 0; i < 10; i++)
    Console.WriteLine(i);

// Accessing arguments
foreach (String arg in args)
    Console.WriteLine(arg);
'''

[COBOL]
size    = '4.09 MiB'
version = 'GnuCOBOL 3.1.2.0'
website = '//gnucobol.sourceforge.io'
example = '''
program-id.example.

data division.
local-storage section.
1 n pic 99 value 0.
1 i pic 99.
1 a pic X(99).
procedure division.

*> Printing
display "Hello, World!"

*> Looping
perform 10 times
display n(2- function log10(n):)
add 1 to n
end-perform.

*> Accessing arguments
accept i from argument-number
perform i times
accept a from argument-value
display a
end-perform.
end-program.
'''

[Crystal]
size    = '284 MiB'
version = '1.0.0'
website = '//crystal-lang.org'
example = '''
# Printing
puts "Hello, World!"

# Looping
(0..9).each do |i|
    puts i
end

# Accessing arguments
ARGV.each do |arg|
    puts arg
end
'''

['F#']
size    = '119 MiB'
version = 'F# 5.0 on .NET 5.0.4'
website = '//fsharp.org'
example = '''
[<EntryPoint>]
let main args =
    // Printing
    printfn "Hello, World!"

    // Looping
    for i in 0..9 do
        printfn "%d" i

    // Accessing arguments
    for arg in args do
        printfn "%s" arg

    0
'''

[Fortran]
size    = '85.6 MiB'
version = 'GNU Fortran 10.2.0'
website = '//gcc.gnu.org/fortran/'
example = '''
character(len=32) :: s
integer :: i

! Printing
print "(a)", "Hello, World!"

! Looping
do i = 0, 9
    print "(i0)", i
end do

! Accessing arguments
! (NOTE: getarg() and iargc() are GNU Fortran extensions)
do i = 1, iargc()
    call getarg(i,s)
    print "(a)", s
end do

end
'''

[Go]
size    = '124 MiB'
version = '1.16.3'
website = '//go.dev'
example = '''
package main

import (
    "fmt"
    "os"
)

func main() {
    // Printing
    fmt.Println("Hello, World!")

    // Looping
    for i := 0; i < 10; i++ {
        fmt.Println(i)
    }

    // Accessing arguments
    for _, arg := range os.Args[1:] {
        fmt.Println(arg)
    }
}
'''

[Haskell]
size    = '332 MiB'
version = 'Glasgow Haskell Compiler 8.8.4'
website = '//www.haskell.org/ghc/'
example = '''
import System.Environment

main = do
  -- Printing
  putStrLn "Hello, World!"

  -- Looping
  mapM print [0..9]

  -- Accessing arguments
  args <- tail <$> getArgs
  mapM putStrLn args
'''

[Hexagony]
size    = '62.6 MiB'
version = 'e373b84'
website = '//github.com/SirBogman/Hexagony'
example = '''
          \ P r i n t i n g .
         \ H ; e ; l ; ; o ; \
        / o ; W ; 0 P ; 2 Q < .
       . > ; r ; l ; d ; P 1 ; \
      > * . . . . . . . . . . < .
     . . . . . . . . . . . . . . .
    . . L o o p i n g . . . . . . .
   \ 1 0 ; " $ / } ! ) " ; \ . . . .
  . . . . . . . > . - " = < . . . . .
 . / . . . . . < . . . . . . . . . . .
  . . . . . . . . . . . . . . . . . .
   . . . A c c e s s i n g . . . . .
    . . . A r g u m e n t s . . . .
     . . . . . . > \ . @ . . . . .
      . > $ > , < \ ) < . . . . .
       . . \ . ; / $ 0 / . . . .
        . . . . . . . . . . . .
         . . . . . . . . . . .
          . . . . . . . . . .
'''

[J]
size    = '3.32 MiB'
version = '9.01.01'
website = '//www.jsoftware.com'
example = '''
NB.Printing
echo'Hello, World!'

NB.Looping
echo i.10 1

NB.Accessing arguments
echo each 2}.ARGV
'''

[Java]
size    = '69.2 MiB'
version = '16'
website = '//openjdk.java.net'
example = '''
class Main {
    public static void main(String[] args) {
        // Printing
        System.out.println("Hello, World!");

        // Looping
        for (int i = 0; i < 10; i++)
            System.out.println(i);

        // Accessing arguments
        for (String arg : args)
            System.out.println(arg);
    }
}
'''

[JavaScript]
size    = '21.6 MiB'
version = 'V8 8.8.278.17'
website = '//v8.dev'
example = '''
// Printing
print("Hello, World!");

// Looping
for (let i = 0; i < 10; i++)
    print(i);

// Accessing arguments
for (let arg of arguments)
    print(arg);
'''

[Julia]
size    = '287 MiB'
version = '1.6.0'
website = '//julialang.org'
example = '''
# Printing
println("Hello, World!")

# Looping
for i=0:9
    println(i)
end

# Accessing arguments
for arg in ARGS
    println(arg)
end
'''

[Lisp]
size    = '33.6 MiB'
version = 'GNU CLISP 2.49.92'
website = '//clisp.sourceforge.io'

[Lua]
size    = '338 KiB'
version = '5.4.3'
website = '//www.lua.org'
example = '''
-- Printing
print("Hello, World!")

-- Looping
for i = 0, 9 do
    print(i)
end

-- Accessing arguments
for i = 1, #arg do
    print(arg[i])
end
'''

[Nim]
size    = '21.6 MiB'
version = '1.4.4'
website = '//nim-lang.org'
example = '''
import os

# Printing
echo "Hello, World!"

# Looping
for i in 0 .. 9:
    echo i

# Accessing arguments
for arg in commandLineParams():
    echo arg
'''

[Perl]
size    = '4.29 MiB'
version = '5.32.1'
website = '//www.perl.org'
example = '''
# Printing
say 'Hello, World!';

# Looping
say for 0..9;

# Accessing arguments
say for @ARGV;
'''

[PHP]
size    = '10.5 MiB'
version = '7.4.16'
website = '//www.php.net'
example = '''
# Printing
echo "Hello, World!\n";

# Looping
for ($i = 0; $i < 10; $i++)
    echo "$i\n";

# Accessing arguments
while ($arg = next($argv))
    echo "$arg\n";
'''

[PowerShell]
size    = '185 MiB'
version = 'PowerShell 7.1.3 on .NET 5.0.4'
website = '//docs.microsoft.com/powershell/scripting/overview'
example = '''
# Printing
Write-Host 'Hello, World!'

# Looping
ForEach ($i in 0..9) {
    Write-Host $i
}

# Accessing arguments
ForEach ($arg in $args) {
    Write-Host $arg
}
'''

[Python]
size    = '199 MiB'
version = '3.9.3'
website = '//www.python.org'
example = '''
import sys

# Printing
print('Hello, World!')

# Looping
for i in range(10):
    print(i)

# Accessing arguments
for arg in sys.argv[1:]:
    print(arg)
'''

[Raku]
size    = '53.7 MiB'
version = 'Raku 6.d on Rakudo 2021.03'
website = '//raku.org'
example = '''
# Printing
say 'Hello, World!';

# Looping
.say for ^10;

# Accessing arguments
.say for @*ARGS;
'''

[Ruby]
size    = '14.5 MiB'
version = '3.0.0'
website = '//www.ruby-lang.org'
example = '''
# Printing
puts 'Hello, World!'

# Looping
(0..9).each do |i|
    puts i
end

# Accessing arguments
ARGV.each do |arg|
    puts arg
end
'''

[Rust]
size    = '661 MiB'
version = '1.51.0'
website = '//www.rust-lang.org'
example = '''
fn main() {
    // Printing
    println!("Hello, World!");

    // Looping
    for i in 0..10 {
        println!("{}", i);
    }

    // Accessing arguments
    for arg in std::env::args().skip(1) {
        println!("{}", arg);
    }
}
'''

[SQL]
size    = '1.02 MiB'
version = '3.35.4'
website = '//sqlite.org/index.html'
example = '''
-- Printing
SELECT 'Hello, World!'

UNION ALL

SELECT * FROM (
    -- Looping
    WITH loop(i) AS (
        SELECT 0
        UNION ALL
        SELECT i+1 FROM loop
        WHERE i<9
    )
    SELECT i FROM loop
)

UNION ALL

-- Accessing arguments
SELECT arg FROM argv
'''

[Swift]
size    = '870 MiB'
version = '5.3.3'
website = '//swift.org'
example = '''
// Printing
print("Hello, World!")

// Looping
for i in 0...9 {
    print(i)
}

// Accessing arguments
for arg in CommandLine.arguments[1...] {
    print(arg)
}
'''

[V]
size    = '98.1 MiB'
version = '0.2.2'
website = '//vlang.io'
example = '''
import os

// Printing
println('Hello, World!')

// Looping
for i in 0..10 {
    println(i)
}

// Accessing arguments
for arg in os.args[1..] {
    println(arg)
}
'''

[Zig]
size    = '216 MiB'
version = '0.7.0'
website = '//ziglang.org'
example = '''
const std = @import("std");

pub fn main() !void {
    const stdout = std.io.getStdOut().writer();

    // Printing
    try stdout.print("Hello, World!\n", .{});

    // Looping
    var i: i32 = 0;
    while (i < 10) : (i += 1)
        try stdout.print("{}\n", .{i});

    // Accessing arguments
    var args = std.process.args();
    _ = args.skip();
    while (args.next(std.testing.allocator)) |arg|
        try stdout.print("{}\n", .{arg});
}
'''

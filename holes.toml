# TODO
#
# Art
#  - Swallowed a Fly
#
# Computing
#  - Deadfish
#
# Mathematics
#  - γ (Euler–Mascheroni constant)
#  - K (Khinchin's constant)
#
# Sequence
#  - Fortunate Numbers
#  - Lucky Numbers
#  - Lucky Primes
#  - Perfect Numbers
#  - Semiprime Numbers
#  - Sphenic Numbers
#  - Triangular Numbers
#
# Transform
#  - ISBN Check Digit
#  - £sd

['12 Days of Christmas']
category = 'Art'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/The_Twelve_Days_of_Christmas_(song)' },
]
preamble = '''
<p>Print the lyrics to the song <b>The 12 Days of Christmas</b>:</p>

<blockquote>On the First day of Christmas
My true love sent to me
A Partridge in a Pear Tree.

…

On the Twelfth day of Christmas
My true love sent to me
Twelve Drummers Drumming,
Eleven Pipers Piping,
Ten Lords-a-Leaping,
Nine Ladies Dancing,
Eight Maids-a-Milking,
Seven Swans-a-Swimming,
Six Geese-a-Laying,
Five Gold Rings,
Four Calling Birds,
Three French Hens,
Two Turtle Doves, and
A Partridge in a Pear Tree.
</blockquote>
'''

['99 Bottles of Beer']
category = 'Art'
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/99_Bottles_of_Beer' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/99_Bottles_of_Beer' },
]
preamble = '''
<p>Print the lyrics to the song <b>99 Bottles of Beer</b>:</p>

<blockquote>99 bottles of beer on the wall, 99 bottles of beer.
Take one down and pass it around, 98 bottles of beer on the wall.

98 bottles of beer on the wall, 98 bottles of beer.
Take one down and pass it around, 97 bottles of beer on the wall.

…

1 bottle of beer on the wall, 1 bottle of beer.
Take one down and pass it around, no more bottles of beer on the wall.

No more bottles of beer on the wall, no more bottles of beer.
Go to the store and buy some more, 99 bottles of beer on the wall.
</blockquote>
'''

['Abundant Numbers']
category = 'Sequence'
links = [
    { name = 'OEIS A005101', url = '//oeis.org/A005101' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Abundant_number' },
]
preamble = '''
<p>
    An abundant number is a number for which the sum of its proper divisors
    (divisors not including the number itself) is greater than the number
    itself. For example <b>12</b> is abundant because its proper divisors are
    <b>1</b>, <b>2</b>, <b>3</b>, <b>4</b>, and <b>6</b> which add up to
    <b>16</b>.

<p>
    Print all the abundant numbers from <b>1</b> to <b>200</b> inclusive, each
    on their own line.
'''

['Arabic to Roman']
category = 'Transform'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Roman_numerals' },
]
preamble = '''
<p>For each arabic numeral argument print the same number in roman numerals.
'''

[brainfuck]
category = 'Computing'
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Execute_Brain****' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Brainfuck' },
]
preamble = '''
<p>
    Brainfuck is a minimalistic esoteric programming language created by
    Urban Müller in 1993.

<p>
    Assuming an infinitely large array, the entire brainfuck alphabet matches
    the following pseudocode:

<div>
    <table>
        <thead>
            <tr>
                <th>Cmd
                <th>Pseudocode
        <tbody>
            <tr>
                <th>&gt;
                <td>ptr++
            <tr>
                <th>&lt;
                <td>ptr--
            <tr>
                <th>+
                <td>array[ptr]++
            <tr>
                <th>-
                <td>array[ptr]--
            <tr>
                <th>.
                <td>print(chr(array[ptr]))
            <tr>
                <th>[
                <td>while(array[ptr]){
            <tr>
                <th>]
                <td>}
    </table>
</div>

<p>
    Write a program that will receive various brainfuck programs as arguments
    and execute each program in turn.
'''

['Christmas Trees']
category = 'Art'
preamble = '''
<p>
    Print a size ascending range of Christmas trees using asterisks, ranging
    from size <b>3</b> to size <b>9</b>, each tree separated by a blank line.

<p>
    A size <b>3</b> tree should look like this, with a single centered
    asterisk for the trunk:

<pre>   *
  ***
 *****
   *
</pre>

<p>With the largest size <b>9</b> tree looking like this:

<pre>         *
        ***
       *****
      *******
     *********
    ***********
   *************
  ***************
 *****************
         *
</pre>
'''

['CSS Colors']
category = 'Transform'
preamble = '''
<svg class=hide>
    <symbol id="color" viewBox="0 0 1 1" xmlns="http://www.w3.org/2000/symbol">
        <rect width="1" height="1"/>
    </symbol>
</svg>

Given each CSS color keyword print the corresponding hex value. The output
will be checked case-insensitively. The full mapping is as follows:

<div id=colors>
    <table>
        <thead>
            <tr><th>Keyword<th>Hex
        <tbody>
            <tr><td><svg><use fill="#cd5c5c" href="#color"/></svg>IndianRed
                <td>#cd5c5c
            <tr><td><svg><use fill="#f08080" href="#color"/></svg>LightCoral
                <td>#f08080
            <tr><td><svg><use fill="#fa8072" href="#color"/></svg>Salmon
                <td>#fa8072
            <tr><td><svg><use fill="#e9967a" href="#color"/></svg>DarkSalmon
                <td>#e9967a
            <tr><td><svg><use fill="#ffa07a" href="#color"/></svg>LightSalmon
                <td>#ffa07a
            <tr><td><svg><use fill="#ff0000" href="#color"/></svg>Red
                <td>#ff0000
            <tr><td><svg><use fill="#dc143c" href="#color"/></svg>Crimson
                <td>#dc143c
            <tr><td><svg><use fill="#b22222" href="#color"/></svg>FireBrick
                <td>#b22222
            <tr><td><svg><use fill="#8b0000" href="#color"/></svg>DarkRed
                <td>#8b0000
            <tr><td><svg><use fill="#ffc0cb" href="#color"/></svg>Pink
                <td>#ffc0cb
            <tr><td><svg><use fill="#ffb6c1" href="#color"/></svg>LightPink
                <td>#ffb6c1
            <tr><td><svg><use fill="#ff69b4" href="#color"/></svg>HotPink
                <td>#ff69b4
            <tr><td><svg><use fill="#ff1493" href="#color"/></svg>DeepPink
                <td>#ff1493
            <tr><td><svg><use fill="#c71585" href="#color"/></svg>MediumVioletRed
                <td>#c71585
            <tr><td><svg><use fill="#db7093" href="#color"/></svg>PaleVioletRed
                <td>#db7093
            <tr><td><svg><use fill="#ff7f50" href="#color"/></svg>Coral
                <td>#ff7f50
            <tr><td><svg><use fill="#ff6347" href="#color"/></svg>Tomato
                <td>#ff6347
            <tr><td><svg><use fill="#ff4500" href="#color"/></svg>OrangeRed
                <td>#ff4500
            <tr><td><svg><use fill="#ff8c00" href="#color"/></svg>DarkOrange
                <td>#ff8c00
            <tr><td><svg><use fill="#ffa500" href="#color"/></svg>Orange
                <td>#ffa500
            <tr><td><svg><use fill="#ffd700" href="#color"/></svg>Gold
                <td>#ffd700
            <tr><td><svg><use fill="#ffff00" href="#color"/></svg>Yellow
                <td>#ffff00
            <tr><td><svg><use fill="#ffffe0" href="#color"/></svg>LightYellow
                <td>#ffffe0
            <tr><td><svg><use fill="#fffacd" href="#color"/></svg>LemonChiffon
                <td>#fffacd
            <tr><td><svg><use fill="#fafad2" href="#color"/></svg>LightGoldenRodYellow
                <td>#fafad2
            <tr><td><svg><use fill="#ffefd5" href="#color"/></svg>PapayaWhip
                <td>#ffefd5
            <tr><td><svg><use fill="#ffe4b5" href="#color"/></svg>Moccasin
                <td>#ffe4b5
            <tr><td><svg><use fill="#ffdab9" href="#color"/></svg>PeachPuff
                <td>#ffdab9
            <tr><td><svg><use fill="#eee8aa" href="#color"/></svg>PaleGoldenRod
                <td>#eee8aa
            <tr><td><svg><use fill="#f0e68c" href="#color"/></svg>Khaki
                <td>#f0e68c
            <tr><td><svg><use fill="#bdb76b" href="#color"/></svg>DarkKhaki
                <td>#bdb76b
            <tr><td><svg><use fill="#e6e6fa" href="#color"/></svg>Lavender
                <td>#e6e6fa
            <tr><td><svg><use fill="#d8bfd8" href="#color"/></svg>Thistle
                <td>#d8bfd8
            <tr><td><svg><use fill="#dda0dd" href="#color"/></svg>Plum
                <td>#dda0dd
            <tr><td><svg><use fill="#ee82ee" href="#color"/></svg>Violet
                <td>#ee82ee
            <tr><td><svg><use fill="#da70d6" href="#color"/></svg>Orchid
                <td>#da70d6
            <tr><td><svg><use fill="#ff00ff" href="#color"/></svg>Fuchsia
                <td>#ff00ff
    </table>
    <table>
        <thead>
            <tr><th>Keyword<th>Hex
        <tbody>
            <tr><td><svg><use fill="#ff00ff" href="#color"/></svg>Magenta
                <td>#ff00ff
            <tr><td><svg><use fill="#ba55d3" href="#color"/></svg>MediumOrchid
                <td>#ba55d3
            <tr><td><svg><use fill="#9370db" href="#color"/></svg>MediumPurple
                <td>#9370db
            <tr><td><svg><use fill="#8a2be2" href="#color"/></svg>BlueViolet
                <td>#8a2be2
            <tr><td><svg><use fill="#9400d3" href="#color"/></svg>DarkViolet
                <td>#9400d3
            <tr><td><svg><use fill="#9932cc" href="#color"/></svg>DarkOrchid
                <td>#9932cc
            <tr><td><svg><use fill="#8b008b" href="#color"/></svg>DarkMagenta
                <td>#8b008b
            <tr><td><svg><use fill="#800080" href="#color"/></svg>Purple
                <td>#800080
            <tr><td><svg><use fill="#4b0082" href="#color"/></svg>Indigo
                <td>#4b0082
            <tr><td><svg><use fill="#483d8b" href="#color"/></svg>DarkSlateBlue
                <td>#483d8b
            <tr><td><svg><use fill="#6a5acd" href="#color"/></svg>SlateBlue
                <td>#6a5acd
            <tr><td><svg><use fill="#7b68ee" href="#color"/></svg>MediumSlateBlue
                <td>#7b68ee
            <tr><td><svg><use fill="#663399" href="#color"/></svg>RebeccaPurple
                <td>#663399
            <tr><td><svg><use fill="#adff2f" href="#color"/></svg>GreenYellow
                <td>#adff2f
            <tr><td><svg><use fill="#7fff00" href="#color"/></svg>Chartreuse
                <td>#7fff00
            <tr><td><svg><use fill="#7cfc00" href="#color"/></svg>LawnGreen
                <td>#7cfc00
            <tr><td><svg><use fill="#00ff00" href="#color"/></svg>Lime
                <td>#00ff00
            <tr><td><svg><use fill="#32cd32" href="#color"/></svg>LimeGreen
                <td>#32cd32
            <tr><td><svg><use fill="#98fb98" href="#color"/></svg>PaleGreen
                <td>#98fb98
            <tr><td><svg><use fill="#90ee90" href="#color"/></svg>LightGreen
                <td>#90ee90
            <tr><td><svg><use fill="#00ff7f" href="#color"/></svg>SpringGreen
                <td>#00ff7f
            <tr><td><svg><use fill="#00fa9a" href="#color"/></svg>MediumSpringGreen
                <td>#00fa9a
            <tr><td><svg><use fill="#3cb371" href="#color"/></svg>MediumSeaGreen
                <td>#3cb371
            <tr><td><svg><use fill="#2e8b57" href="#color"/></svg>SeaGreen
                <td>#2e8b57
            <tr><td><svg><use fill="#228b22" href="#color"/></svg>ForestGreen
                <td>#228b22
            <tr><td><svg><use fill="#008000" href="#color"/></svg>Green
                <td>#008000
            <tr><td><svg><use fill="#006400" href="#color"/></svg>DarkGreen
                <td>#006400
            <tr><td><svg><use fill="#9acd32" href="#color"/></svg>YellowGreen
                <td>#9acd32
            <tr><td><svg><use fill="#6b8e23" href="#color"/></svg>OliveDrab
                <td>#6b8e23
            <tr><td><svg><use fill="#808000" href="#color"/></svg>Olive
                <td>#808000
            <tr><td><svg><use fill="#556b2f" href="#color"/></svg>DarkOliveGreen
                <td>#556b2f
            <tr><td><svg><use fill="#66cdaa" href="#color"/></svg>MediumAquamarine
                <td>#66cdaa
            <tr><td><svg><use fill="#8fbc8f" href="#color"/></svg>DarkSeaGreen
                <td>#8fbc8f
            <tr><td><svg><use fill="#20b2aa" href="#color"/></svg>LightSeaGreen
                <td>#20b2aa
            <tr><td><svg><use fill="#008b8b" href="#color"/></svg>DarkCyan
                <td>#008b8b
            <tr><td><svg><use fill="#008080" href="#color"/></svg>Teal
                <td>#008080
            <tr><td><svg><use fill="#00ffff" href="#color"/></svg>Aqua
                <td>#00ffff
    </table>
    <table>
        <thead>
            <tr><th>Keyword<th>Hex
        <tbody>
            <tr><td><svg><use fill="#00ffff" href="#color"/></svg>Cyan
                <td>#00ffff
            <tr><td><svg><use fill="#e0ffff" href="#color"/></svg>LightCyan
                <td>#e0ffff
            <tr><td><svg><use fill="#afeeee" href="#color"/></svg>PaleTurquoise
                <td>#afeeee
            <tr><td><svg><use fill="#7fffd4" href="#color"/></svg>Aquamarine
                <td>#7fffd4
            <tr><td><svg><use fill="#40e0d0" href="#color"/></svg>Turquoise
                <td>#40e0d0
            <tr><td><svg><use fill="#48d1cc" href="#color"/></svg>MediumTurquoise
                <td>#48d1cc
            <tr><td><svg><use fill="#00ced1" href="#color"/></svg>DarkTurquoise
                <td>#00ced1
            <tr><td><svg><use fill="#5f9ea0" href="#color"/></svg>CadetBlue
                <td>#5f9ea0
            <tr><td><svg><use fill="#4682b4" href="#color"/></svg>SteelBlue
                <td>#4682b4
            <tr><td><svg><use fill="#b0c4de" href="#color"/></svg>LightSteelBlue
                <td>#b0c4de
            <tr><td><svg><use fill="#b0e0e6" href="#color"/></svg>PowderBlue
                <td>#b0e0e6
            <tr><td><svg><use fill="#add8e6" href="#color"/></svg>LightBlue
                <td>#add8e6
            <tr><td><svg><use fill="#87ceeb" href="#color"/></svg>SkyBlue
                <td>#87ceeb
            <tr><td><svg><use fill="#87cefa" href="#color"/></svg>LightSkyBlue
                <td>#87cefa
            <tr><td><svg><use fill="#00bfff" href="#color"/></svg>DeepSkyBlue
                <td>#00bfff
            <tr><td><svg><use fill="#1e90ff" href="#color"/></svg>DodgerBlue
                <td>#1e90ff
            <tr><td><svg><use fill="#6495ed" href="#color"/></svg>CornflowerBlue
                <td>#6495ed
            <tr><td><svg><use fill="#4169e1" href="#color"/></svg>RoyalBlue
                <td>#4169e1
            <tr><td><svg><use fill="#0000ff" href="#color"/></svg>Blue
                <td>#0000ff
            <tr><td><svg><use fill="#0000cd" href="#color"/></svg>MediumBlue
                <td>#0000cd
            <tr><td><svg><use fill="#00008b" href="#color"/></svg>DarkBlue
                <td>#00008b
            <tr><td><svg><use fill="#000080" href="#color"/></svg>Navy
                <td>#000080
            <tr><td><svg><use fill="#191970" href="#color"/></svg>MidnightBlue
                <td>#191970
            <tr><td><svg><use fill="#fff8dc" href="#color"/></svg>Cornsilk
                <td>#fff8dc
            <tr><td><svg><use fill="#ffebcd" href="#color"/></svg>BlanchedAlmond
                <td>#ffebcd
            <tr><td><svg><use fill="#ffe4c4" href="#color"/></svg>Bisque
                <td>#ffe4c4
            <tr><td><svg><use fill="#ffdead" href="#color"/></svg>NavajoWhite
                <td>#ffdead
            <tr><td><svg><use fill="#f5deb3" href="#color"/></svg>Wheat
                <td>#f5deb3
            <tr><td><svg><use fill="#deb887" href="#color"/></svg>Burlywood
                <td>#deb887
            <tr><td><svg><use fill="#d2b48c" href="#color"/></svg>Tan
                <td>#d2b48c
            <tr><td><svg><use fill="#bc8f8f" href="#color"/></svg>RosyBrown
                <td>#bc8f8f
            <tr><td><svg><use fill="#f4a460" href="#color"/></svg>SandyBrown
                <td>#f4a460
            <tr><td><svg><use fill="#daa520" href="#color"/></svg>GoldenRod
                <td>#daa520
            <tr><td><svg><use fill="#b8860b" href="#color"/></svg>DarkGoldenRod
                <td>#b8860b
            <tr><td><svg><use fill="#cd853f" href="#color"/></svg>Peru
                <td>#cd853f
            <tr><td><svg><use fill="#d2691e" href="#color"/></svg>Chocolate
                <td>#d2691e
            <tr><td><svg><use fill="#8b4513" href="#color"/></svg>SaddleBrown
                <td>#8b4513
    </table>
    <table>
        <thead>
            <tr><th>Keyword<th>Hex
        <tbody>
            <tr><td><svg><use fill="#a0522d" href="#color"/></svg>Sienna
                <td>#a0522d
            <tr><td><svg><use fill="#a52a2a" href="#color"/></svg>Brown
                <td>#a52a2a
            <tr><td><svg><use fill="#800000" href="#color"/></svg>Maroon
                <td>#800000
            <tr><td><svg><use fill="#ffffff" href="#color"/></svg>White
                <td>#ffffff
            <tr><td><svg><use fill="#fffafa" href="#color"/></svg>Snow
                <td>#fffafa
            <tr><td><svg><use fill="#f0fff0" href="#color"/></svg>Honeydew
                <td>#f0fff0
            <tr><td><svg><use fill="#f5fffa" href="#color"/></svg>MintCream
                <td>#f5fffa
            <tr><td><svg><use fill="#f0ffff" href="#color"/></svg>Azure
                <td>#f0ffff
            <tr><td><svg><use fill="#f0f8ff" href="#color"/></svg>AliceBlue
                <td>#f0f8ff
            <tr><td><svg><use fill="#f8f8ff" href="#color"/></svg>GhostWhite
                <td>#f8f8ff
            <tr><td><svg><use fill="#f5f5f5" href="#color"/></svg>WhiteSmoke
                <td>#f5f5f5
            <tr><td><svg><use fill="#fff5ee" href="#color"/></svg>SeaShell
                <td>#fff5ee
            <tr><td><svg><use fill="#f5f5dc" href="#color"/></svg>Beige
                <td>#f5f5dc
            <tr><td><svg><use fill="#fdf5e6" href="#color"/></svg>OldLace
                <td>#fdf5e6
            <tr><td><svg><use fill="#fffaf0" href="#color"/></svg>FloralWhite
                <td>#fffaf0
            <tr><td><svg><use fill="#fffff0" href="#color"/></svg>Ivory
                <td>#fffff0
            <tr><td><svg><use fill="#faebd7" href="#color"/></svg>AntiqueWhite
                <td>#faebd7
            <tr><td><svg><use fill="#faf0e6" href="#color"/></svg>Linen
                <td>#faf0e6
            <tr><td><svg><use fill="#fff0f5" href="#color"/></svg>LavenderBlush
                <td>#fff0f5
            <tr><td><svg><use fill="#ffe4e1" href="#color"/></svg>MistyRose
                <td>#ffe4e1
            <tr><td><svg><use fill="#dcdcdc" href="#color"/></svg>Gainsboro
                <td>#dcdcdc
            <tr><td><svg><use fill="#d3d3d3" href="#color"/></svg>LightGray
                <td>#d3d3d3
            <tr><td><svg><use fill="#d3d3d3" href="#color"/></svg>LightGrey
                <td>#d3d3d3
            <tr><td><svg><use fill="#c0c0c0" href="#color"/></svg>Silver
                <td>#c0c0c0
            <tr><td><svg><use fill="#a9a9a9" href="#color"/></svg>DarkGray
                <td>#a9a9a9
            <tr><td><svg><use fill="#a9a9a9" href="#color"/></svg>DarkGrey
                <td>#a9a9a9
            <tr><td><svg><use fill="#808080" href="#color"/></svg>Gray
                <td>#808080
            <tr><td><svg><use fill="#808080" href="#color"/></svg>Grey
                <td>#808080
            <tr><td><svg><use fill="#696969" href="#color"/></svg>DimGray
                <td>#696969
            <tr><td><svg><use fill="#696969" href="#color"/></svg>DimGrey
                <td>#696969
            <tr><td><svg><use fill="#778899" href="#color"/></svg>LightSlateGray
                <td>#778899
            <tr><td><svg><use fill="#778899" href="#color"/></svg>LightSlateGrey
                <td>#778899
            <tr><td><svg><use fill="#708090" href="#color"/></svg>SlateGray
                <td>#708090
            <tr><td><svg><use fill="#708090" href="#color"/></svg>SlateGrey
                <td>#708090
            <tr><td><svg><use fill="#2f4f4f" href="#color"/></svg>DarkSlateGray
                <td>#2f4f4f
            <tr><td><svg><use fill="#2f4f4f" href="#color"/></svg>DarkSlateGrey
                <td>#2f4f4f
            <tr><td><svg><use fill="#000000" href="#color"/></svg>Black
                <td>#000000
    </table>
'''

[Cubes]
category = 'Art'
preamble = '''
<p>
    Draw <b>7</b> cubes in increasing size using "╱" (U+2571) for the diagonal
    edges, "│" (U+2502) for the vertical edges, "─" (U+2500) for the
    horizontal edges, and "█" (U+2588) for the vertices. The cubes should
    range from size <b>1</b> to size <b>7</b> with a blank line between each
    cube. A size <b>1</b> cube should look like:

<pre>  █────█
 ╱    ╱│
█────█ │
│    │ █
│    │╱
█────█
</pre>

<p>And a size <b>7</b> cube should look like:

<pre>        █────────────────────────────█
       ╱                            ╱│
      ╱                            ╱ │
     ╱                            ╱  │
    ╱                            ╱   │
   ╱                            ╱    │
  ╱                            ╱     │
 ╱                            ╱      │
█────────────────────────────█       │
│                            │       │
│                            │       │
│                            │       │
│                            │       │
│                            │       │
│                            │       │
│                            │       █
│                            │      ╱
│                            │     ╱
│                            │    ╱
│                            │   ╱
│                            │  ╱
│                            │ ╱
│                            │╱
█────────────────────────────█
</pre>
'''

[Diamonds]
category = 'Art'
preamble = '''
<p>
    Print a size ascending range of Diamonds using the numbers <b>1</b> to
    <b>9</b>, ranging from size <b>1</b> to size <b>9</b>, each diamond
    separated by a blank line.<p>A size <b>1</b> diamond should look like
    this, a single centered <b>1</b>:

<pre>         1</pre>

<p>With the largest size <b>9</b> diamond looking like this:

<pre>         1
        121
       12321
      1234321
     123454321
    12345654321
   1234567654321
  123456787654321
 12345678987654321
  123456787654321
   1234567654321
    12345654321
     123454321
      1234321
       12321
        121
         1
</pre>
'''

[Divisors]
category = 'Sequence'
preamble = '''
<p>
    A number is a divisor of another number if it can divide into it with no
    remainder.

<p>
    Print the positive divisors of each number from <b>1</b> to <b>100</b>
    inclusive, on their own line, with each divisor separated by a space.
'''

['Emirp Numbers']
category = 'Sequence'
links = [
    { name = 'OEIS A006567', url = '//oeis.org/A006567' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Emirp' },
]
preamble = '''
<p>
    An emirp (prime spelled backwards) is a prime number that results in a
    different prime when its decimal digits are reversed. For example both
    <b>13</b> and <b>31</b> are emirps.

<p>
    Print all the emirp numbers from <b>1</b> to <b>1000</b> inclusive, each
    on their own line.
'''

['Ellipse Perimeters']
category = 'Mathematics'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Ellipse' },
]
experiment = -1
preamble = '''
<p>
    Given the two radii of an ellipse, compute its perimeter and print
    its integer part.
'''

[Emojify]
category = 'Transform'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/List_of_emoticons' },
]
preamble = '''
<p>
    Given each of the following ASCII emoticons print the corresponding
    Unicode emoji.

<p>Note despite how they appear below, there are no spaces in the emoticons.

<div id=emojify>
    <div>😀<pre> :-D</pre></div>
    <div>🙂<pre> :-)</pre></div>
    <div>😐<pre> :-|</pre></div>
    <div>🙁<pre> :-(</pre></div>
    <div>😕<pre> :-\</pre></div>
    <div>😗<pre> :-*</pre></div>
    <div>😮<pre> :-O</pre></div>
    <div>🤐<pre> :-#</pre></div>
    <div>😅<pre>':-D</pre></div>
    <div>😓<pre>':-(</pre></div>
    <div>😂<pre>:'-)</pre></div>
    <div>😢<pre>:'-(</pre></div>
    <div>😛<pre> :-P</pre></div>
    <div>😜<pre> ;-P</pre></div>
    <div>😝<pre> X-P</pre></div>
    <div>😆<pre> X-)</pre></div>
    <div>😇<pre>O:-)</pre></div>
    <div>😉<pre> ;-)</pre></div>
    <div>😳<pre> :-$</pre></div>
    <div>😶<pre> :- </pre></div>
    <div>😎<pre> B-)</pre></div>
    <div>😏<pre> :-J</pre></div>
    <div>😈<pre>}:-)</pre></div>
    <div>👿<pre>}:-(</pre></div>
    <div>😡<pre> :-@</pre></div>
</div>
'''

['Evil Numbers']
category = 'Sequence'
links = [
    { name = 'OEIS A001969', url = '//oeis.org/A001969' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Evil_number' },
]
preamble = '''
<p>
    An evil number is a non-negative number that has an even number of 1s in
    its binary expansion.

<p>
    Print all the evil numbers from <b>0</b> to <b>50</b> inclusive, each on
    their own line.

<p>
    Numbers that are not evil are called
    <a href=odious-numbers>odious numbers</a>.
'''

[Fibonacci]
category = 'Sequence'
links = [
    { name = 'OEIS A000045', url = '//oeis.org/A000045' },
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Fibonacci_sequence' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Fibonacci_number' },
]
preamble = '''
<p>
    Print the first <b>31</b> Fibonacci numbers from <b>F<sub>0</sub> = 0</b>
    to <b>F<sub>30</sub> = 832040</b> (inclusive), each on a separate line.
'''

['Fizz Buzz']
category = 'Sequence'
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/FizzBuzz' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Fizz_buzz' },
]
preamble = '''
<p>
    Print the numbers from <b>1</b> to <b>100</b> inclusive, each on their own
    line.

<p>
    If, however, the number is a multiple of <b>three</b> then print
    <b>Fizz</b> instead, and if the number is a multiple of <b>five</b> then
    print <b>Buzz</b>.

<p>
    For numbers which are multiples of <b>both three and five</b> then print
    <b>FizzBuzz</b>.
'''

['Happy Numbers']
category = 'Sequence'
links = [
    { name = 'OEIS A007770', url = '//oeis.org/A007770' },
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Happy_numbers' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Happy_number' },
]
preamble = '''
<p>
    A happy number is defined by the following Sequence: Starting with any
    positive integer, replace the number by the sum of the squares of its
    digits in base-ten, and repeat the process until the number either equals
    1 (where it will stay), or it loops endlessly in a cycle that does not
    include 1. Those numbers for which this process ends in 1 are happy
    numbers, while those that do not end in 1 are sad numbers.

<p>For example, 19 is happy, as the associated Sequence is:</p>

<dl>
    <dd>1<sup>2</sup> + 9<sup>2</sup> = 82
    <dd>8<sup>2</sup> + 2<sup>2</sup> = 68
    <dd>6<sup>2</sup> + 8<sup>2</sup> = 100
    <dd>1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1.
</dl>

<p>
    Print all the happy numbers from <b>1</b> to <b>200</b> inclusive, each on
    their own line.
'''

[Intersection]
category = 'Mathematics'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Intersection' },
]
preamble = '''
<p>A box is defined via <b>x</b>, <b>y</b>, <b>w</b> and <b>h</b> as

<pre>
  y
  │ ┌───w───┐
  │ │   ┌───┼──┐
  │ h   │▓▓▓│  │
  │ │   │▓▓▓│  │
  │ o───┼───┘  │
  │     o──────┘
  └───────────────x
(0,0)
</pre>

<p>Compute the intersection area between two boxes given as

<pre>x1 y1 w1 h1 x2 y2 w2 h2</pre>
'''

['Julia Set']
category = 'Art'
experiment = -1
links = [
    { name = 'Wikipedia', url = '//en.wikipedia.org/wiki/Julia_set'},
    { name = 'Rosettacode', url = '//rosettacode.org/wiki/Julia_set'}
]
preamble = '''
<p>
    In a 500x500px canvas, draw the Julia for f(z) = z^2 + c, where c = -0.4 + 0.6i. Output the image in ppm grayscale format.
'''

['Kolakoski Constant']
category = 'Mathematics'
links = [
   { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Kolakoski_sequence#Kolakoski_Constant' },
]
preamble = '''
<p>
    The Kolakoski constant is created by taking the
    <a href=kolakoski-sequence>Kolakoski sequence</a> and subtracting one from
    each element then interpreting it as a binary fraction.

<pre>
    1 221121221221121122121121…
    0.110010110110010011010010…
    0.7945071927…
</pre>

<p>Print the Kolakoski constant to the first 1,000 decimal places.
'''

['Kolakoski Sequence']
category = 'Sequence'
links = [
    { name = 'OEIS A000002', url = '//oeis.org/A000002' },
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Kolakoski_sequence' },
]
preamble = '''
<p>
    The Kolakoski sequence is a self referential sequence where the nth
    element is the length of the nth run of same numbers in the sequence.
    This has the interesting property where if you take the run lengths of
    this sequence, then you will get the same sequence back again. For
    example, the sequence starting with (1, 2) looks like:

<pre>
    1 2 2 1 1 2 1 2 2 1 2 2 1 1 2 1 1 2 2 1 2 1 1 2 1…
    1  2   2  1 1  2  1  2   2  1  2   2  1 1  2  1 1…
</pre>

<p>
    Beginning with (1, 2) output the first 1000 elements in the Kolakoski
    sequence, separated by spaces.
'''

['Leap Years']
category = 'Sequence'
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Leap_year' },
]
preamble = '''
<p>
    In the Gregorian calendar, a leap year is created by extending February
    to 29 days in order to keep the calendar year synchronized with the
    astronomical year. These longer years occur in years which are multiples
    of <b>4</b>, with the exception of centennial years that aren’t multiples
    of <b>400</b>.

<p>
    Write a program to print all the leap years from the year <b>1800</b> up
    to and including <b>2400</b>.
'''

['Levenshtein Distance']
category = 'Transform'
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Levenshtein_distance' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Levenshtein_distance' },
]
preamble = '''
<p>
    The Levenshtein distance is the minimum number of single character edits
    that are needed to transform one word into another. The available edits
    are deletion, insertion, or substitution of a single character.

<p>
    For example the Levenshtein distance between <b>“shine”</b> and
    <b>“train”</b> is 4:

<ol>
    <li>shine → shin (deletion of 'e')
    <li>shin → <b>t</b>shin (insertion of 't')
    <li>t<b>s</b>hin → t<b>r</b>hin (substitution of 's' for 'r')
    <li>tr<b>h</b>in → tr<b>a</b>in (substitution of 'h' for 'a')
</ol>

<p>
    For each pair of words per argument, print the Levenshtein distance on its
    own line.
'''

['Leyland Numbers']
category = 'Sequence'
links = [
    { name = 'OEIS A076980', url = '//oeis.org/A076980' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Leyland_number' },
]
preamble = '''
<p>
    A leyland number is of the form <b>x<sup>y</sup> + y<sup>x</sup></b> where
    <b>1 < y ≤ x</b>.

<p>
    For example, <b>8</b> is a leyland number because
    <b>2<sup>2</sup> + 2<sup>2</sup> = 8</b>.

<p>
    Print all the leyland numbers from <b>1</b> to <b>100,000,000,000</b>
    inclusive, each on their own line.
'''

['Look and Say']
category = 'Sequence'
links = [
    { name = 'OEIS A005150', url = '//oeis.org/A005150' },
    { name = 'Rosetta Code', url = '//www.rosettacode.org/wiki/Look-and-say_sequence' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Look-and-say_sequence' },
]
preamble = '''
<p>
    The Look and Say sequence starts with 1 and is continued by looking
    at each of the runs of the same number in the previous element and combining
    the length with the original number. For example the next element after
    111221 would be 312211 (three ones, two twos and one one).

<p>Print the first 20 elements of the Look and Say sequence.
'''

['Lucky Tickets']
category = 'Mathematics'
preamble = '''
<p>
    In Russia, bus ticket numbers consist of 6 decimal digits. It is considered lucky when the sum of the first three digits equals the sum of the last three digits. The concept of lucky tickets can be extended to ticket numbering systems with even numbers of digits and arbitrary bases.
<p>
    Each argument describes a ticket numbering system and consists of two numbers separated by a space. The first is the even number of digits. The second is the base of the numbering system (2-16). For each argument, output the total number of lucky tickets for the numbering system on a separate line.
'''

[Mandelbrot]
category = 'Art'
experiment = -1
links = [
    { name = 'Wikipedia', url = '//en.wikipedia.org/wiki/Mandelbrot_set'},
    { name = 'Rosettacode', url = '//rosettacode.org/wiki/Mandelbrot_set'},
]
preamble = '''
<p>
    Draw the Mandelbrot set in a 40x80 unicode grid by using ▒ (U+2592)
    and █ (U+2588).
'''

[Maze]
category = 'Gaming'
experiment = 338
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Maze_solving_algorithm' },
]
preamble = '''
<p>
    For each input maze, find the shortest path from <b>S</b>tart to <b>E</b>nd points. Output the path in the maze with dots. For example:

<pre>
███████████       ███████████
█S█      E█       █S█  ....E█
█ ███ █████       █.███.█████
█   █     █   →   █...█.....█
███ █████ █       ███.█████.█
█         █       █  .......█
███████████       ███████████
</pre>
'''

['Morse Decoder']
category = 'Transform'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Morse_code' },
]
preamble = '''
<p>
    Using ▄ (U+2584 Lower Half Block) to represent a dot, decode the argument
    from International Morse Code to alphanumeric.

<ol>
    <li>The length of a dot is one unit.
    <li>A dash is three units.
    <li>The space between parts of the same letter is one unit.
    <li>The space between letters is three units.
    <li>The space between words is ten units.
</ol>

<div id=morse>
    <table>
        <thead>
            <tr>
                <th>Chr.
                <th>Code
        <tbody>
            <tr><td>A<td>▄ ▄▄▄
            <tr><td>B<td>▄▄▄ ▄ ▄ ▄
            <tr><td>C<td>▄▄▄ ▄ ▄▄▄ ▄
            <tr><td>D<td>▄▄▄ ▄ ▄
            <tr><td>E<td>▄
            <tr><td>F<td>▄ ▄ ▄▄▄ ▄
            <tr><td>G<td>▄▄▄ ▄▄▄ ▄
            <tr><td>H<td>▄ ▄ ▄ ▄
            <tr><td>I<td>▄ ▄
    </table>
    <table>
        <thead>
            <tr>
                <th>Chr.
                <th>Code
        <tbody>
            <tr><td>J<td>▄ ▄▄▄ ▄▄▄ ▄▄▄
            <tr><td>K<td>▄▄▄ ▄ ▄▄▄
            <tr><td>L<td>▄ ▄▄▄ ▄ ▄
            <tr><td>M<td>▄▄▄ ▄▄▄
            <tr><td>N<td>▄▄▄ ▄
            <tr><td>O<td>▄▄▄ ▄▄▄ ▄▄▄
            <tr><td>P<td>▄ ▄▄▄ ▄▄▄ ▄
            <tr><td>Q<td>▄▄▄ ▄▄▄ ▄ ▄▄▄
            <tr><td>R<td>▄ ▄▄▄ ▄
    </table>
    <table>
        <thead>
            <tr>
                <th>Chr.
                <th>Code
        <tbody>
            <tr><td>S<td>▄ ▄ ▄
            <tr><td>T<td>▄▄▄
            <tr><td>U<td>▄ ▄ ▄▄▄
            <tr><td>V<td>▄ ▄ ▄ ▄▄▄
            <tr><td>W<td>▄ ▄▄▄ ▄▄▄
            <tr><td>X<td>▄▄▄ ▄ ▄ ▄▄▄
            <tr><td>Y<td>▄▄▄ ▄ ▄▄▄ ▄▄▄
            <tr><td>Z<td>▄▄▄ ▄▄▄ ▄ ▄
            <tr><td>0<td>▄▄▄ ▄▄▄ ▄▄▄ ▄▄▄ ▄▄▄
    </table>
    <table>
        <thead>
            <tr>
                <th>Chr.
                <th>Code
        <tbody>
            <tr><td>1<td>▄ ▄▄▄ ▄▄▄ ▄▄▄ ▄▄▄
            <tr><td>2<td>▄ ▄ ▄▄▄ ▄▄▄ ▄▄▄
            <tr><td>3<td>▄ ▄ ▄ ▄▄▄ ▄▄▄
            <tr><td>4<td>▄ ▄ ▄ ▄ ▄▄▄
            <tr><td>5<td>▄ ▄ ▄ ▄ ▄
            <tr><td>6<td>▄▄▄ ▄ ▄ ▄ ▄
            <tr><td>7<td>▄▄▄ ▄▄▄ ▄ ▄ ▄
            <tr><td>8<td>▄▄▄ ▄▄▄ ▄▄▄ ▄ ▄
            <tr><td>9<td>▄▄▄ ▄▄▄ ▄▄▄ ▄▄▄ ▄
    </table>
</div>
'''

['Morse Encoder']
category = 'Transform'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Morse_code' },
]
preamble = '''
<p>
    Using ▄ (U+2584 Lower Half Block) to represent a dot, encode the argument
    from alphanumeric into International Morse Code.

<ol>
    <li>The length of a dot is one unit.
    <li>A dash is three units.
    <li>The space between parts of the same letter is one unit.
    <li>The space between letters is three units.
    <li>The space between words is ten units.
</ol>

<div id=morse>
    <table>
        <thead>
            <tr>
                <th>Chr.
                <th>Code
        <tbody>
            <tr><td>A<td>▄ ▄▄▄
            <tr><td>B<td>▄▄▄ ▄ ▄ ▄
            <tr><td>C<td>▄▄▄ ▄ ▄▄▄ ▄
            <tr><td>D<td>▄▄▄ ▄ ▄
            <tr><td>E<td>▄
            <tr><td>F<td>▄ ▄ ▄▄▄ ▄
            <tr><td>G<td>▄▄▄ ▄▄▄ ▄
            <tr><td>H<td>▄ ▄ ▄ ▄
            <tr><td>I<td>▄ ▄
    </table>
    <table>
        <thead>
            <tr>
                <th>Chr.
                <th>Code
        <tbody>
            <tr><td>J<td>▄ ▄▄▄ ▄▄▄ ▄▄▄
            <tr><td>K<td>▄▄▄ ▄ ▄▄▄
            <tr><td>L<td>▄ ▄▄▄ ▄ ▄
            <tr><td>M<td>▄▄▄ ▄▄▄
            <tr><td>N<td>▄▄▄ ▄
            <tr><td>O<td>▄▄▄ ▄▄▄ ▄▄▄
            <tr><td>P<td>▄ ▄▄▄ ▄▄▄ ▄
            <tr><td>Q<td>▄▄▄ ▄▄▄ ▄ ▄▄▄
            <tr><td>R<td>▄ ▄▄▄ ▄
    </table>
    <table>
        <thead>
            <tr>
                <th>Chr.
                <th>Code
        <tbody>
            <tr><td>S<td>▄ ▄ ▄
            <tr><td>T<td>▄▄▄
            <tr><td>U<td>▄ ▄ ▄▄▄
            <tr><td>V<td>▄ ▄ ▄ ▄▄▄
            <tr><td>W<td>▄ ▄▄▄ ▄▄▄
            <tr><td>X<td>▄▄▄ ▄ ▄ ▄▄▄
            <tr><td>Y<td>▄▄▄ ▄ ▄▄▄ ▄▄▄
            <tr><td>Z<td>▄▄▄ ▄▄▄ ▄ ▄
            <tr><td>0<td>▄▄▄ ▄▄▄ ▄▄▄ ▄▄▄ ▄▄▄
    </table>
    <table>
        <thead>
            <tr>
                <th>Chr.
                <th>Code
        <tbody>
            <tr><td>1<td>▄ ▄▄▄ ▄▄▄ ▄▄▄ ▄▄▄
            <tr><td>2<td>▄ ▄ ▄▄▄ ▄▄▄ ▄▄▄
            <tr><td>3<td>▄ ▄ ▄ ▄▄▄ ▄▄▄
            <tr><td>4<td>▄ ▄ ▄ ▄ ▄▄▄
            <tr><td>5<td>▄ ▄ ▄ ▄ ▄
            <tr><td>6<td>▄▄▄ ▄ ▄ ▄ ▄
            <tr><td>7<td>▄▄▄ ▄▄▄ ▄ ▄ ▄
            <tr><td>8<td>▄▄▄ ▄▄▄ ▄▄▄ ▄ ▄
            <tr><td>9<td>▄▄▄ ▄▄▄ ▄▄▄ ▄▄▄ ▄
    </table>
</div>
'''

['Niven Numbers']
category = 'Sequence'
links = [
    { name = 'OEIS A005349', url = '//oeis.org/A005349' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Niven_number' },
]
preamble = '''
<p>
    A niven number is a non-negative number that is divisible by the sum of
    its digits.

<p>
    Print all the niven numbers from <b>0</b> to <b>100</b> inclusive, each on
    their own line.
'''

['Odd Polyomino Tiling']
category = 'Art'
experiment = -1
links = [
    { name = 'Rectifiable polyomino page', url = 'https://cflmath.com/Polyomino/rectifiable_data.html' },
    { name = 'Wikipedia Polyomino Page',   url = 'https://en.wikipedia.org/wiki/Polyomino' },
]
preamble = '''
<p>
    A polyomino is called rectifiable if there exists a rectangle that can be
    tiled with the copies of the polyomino. It is even more challenging to
    find a so-called odd tiling for a given polyomino, especially covered
    rectangles with minimal size.

'''

['Odious Numbers']
category = 'Sequence'
links = [
    { name = 'OEIS A000069', url = '//oeis.org/A000069' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Odious_number' },
]
preamble = '''
<p>
    An odious number is a non-negative number that has an odd number of 1s in
    its binary expansion.

<p>
    Print all the odious numbers from <b>0</b> to <b>50</b> inclusive, each on
    their own line.

<p>
    Numbers that are not odious are called
    <a href=evil-numbers>evil numbers</a>.
'''

['Ordinal Numbers']
category = 'Transform'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Ordinal_numeral' },
]
preamble = '''
<p>
    Given various integers as arguments, print the argument and its ordinal
    suffix.
'''

['Pangram Grep']
category = 'Transform'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Pangram' },
]
preamble = '''
<p>A pangram is a sentence that uses every letter of a given alphabet.

<p>
    Write a program that will receive various sentences as arguments and print
    those that are valid pangrams, meaning they use all letters from a-z, case
    insensitive.
'''

['Pascal’s Triangle']
category = 'Sequence'
links = [
    { name = 'Wikipedia', url = "//www.wikipedia.org/wiki/Pascal's_triangle" },
]
preamble = '''
<p>Print the first <b>20 rows</b> of Pascal’s triangle.
'''

['Pernicious Numbers']
category = 'Sequence'
links = [
    { name = 'OEIS A052294', url = '//oeis.org/A052294' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Pernicious_number' },
]
preamble = '''
<p>
    A pernicious number is a positive number where the sum of its binary
    expansion is a <a href=prime-numbers>prime number</a>.

<p>
    For example, <b>5</b> is a pernicious number since
    <b>5 = 101<sub>2</sub></b> and <b>1 + 1 = 2</b>, which is prime.

<p>
    Print all the pernicious numbers from <b>0</b> to <b>50</b> inclusive,
    each on their own line.
'''

[Poker]
category = 'Gaming'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/List_of_poker_hands' },
]
preamble = '''
<p>
    Given various poker hands as arguments, print what type of hand each
    argument is.

<p>The list of hands in ranking order are as follows:

<div>
    <table>
        <thead>
            <tr>
                <th>Hand
                <th>Cards
                <th>Description
        <tbody>
            <tr>
                <th>Royal Flush
                <td class=text-red>🃁🃎🃍🃋🃊
                <td>Ten to Ace of the same suit
            <tr>
                <th>Straight Flush
                <td>🃛🃚🃙🃘🃗
                <td>Five consecutive cards of the same suit
            <tr>
                <th>Four of a Kind
                <td>🃕<span class=text-red>🃅🂵</span>🂥<span class=text-red>🃂</span>
                <td>Four cards of the same rank
            <tr>
                <th>Full House
                <td>🂦<span class=text-red>🂶🃆</span>🃞<span class=text-red>🂾</span>
                <td>Three of a Kind combined with a Pair
            <tr>
                <th>Flush
                <td class=text-red>🃋🃉🃈🃄🃃
                <td>Five cards of the same suit
            <tr>
                <th>Straight
                <td><span class=text-red>🃊</span>🂩<span class=text-red>🂸🃇</span>🃖
                <td>Five consecutive cards
            <tr>
                <th>Three of a Kind
                <td>🃝🂭<span class=text-red>🂽🂹</span>🂢
                <td>Three cards of the same rank
            <tr>
                <th>Two Pair
                <td><span class=text-red>🂻</span>🂫🃓🂣<span class=text-red>🂲</span>
                <td>Two separate pairs
            <tr>
                <th>Pair
                <td>🂪<span class=text-red>🂺</span>🂨<span class=text-red>🂷</span>🃔
                <td>Two cards of the same rank
            <tr>
                <th>High Card
                <td><span class=text-red>🃎🃍</span>🂧🂤<span class=text-red>🂳</span>
                <td>No other hand applies
    </table>
</div>
'''

['Prime Numbers']
category = 'Sequence'
links = [
    { name = 'OEIS A000040', url = '//oeis.org/A000040' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Prime_number' },
]
preamble = '''
<p>
    Print all the prime numbers from <b>1</b> to <b>100</b> inclusive, each on
    their own line.
'''

[Quine]
category = 'Computing'
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Quine' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Quine_(computing)' },
]
preamble = '''
<p>
    A <b>quine</b> is a non-empty computer program which takes no input and
    produces a copy of its own source code as its only output. Produce such a
    program.

<p>Trailing whitespace is <b>NOT</b> stripped from the output for this hole.
'''

['Recamán']
category = 'Sequence'
links = [
    { name = 'Numberphile',  url = '//numberphile.com/videos/slightly-spooky-recaman-sequence' },
    { name = 'OEIS A005132', url = '//oeis.org/A005132'},
    { name = 'Rosetta Code', url = "//rosettacode.org/wiki/Recaman's_sequence" },
    { name = 'Wikipedia',    url = "//www.wikipedia.org/wiki/Recamán's_sequence" },
]
preamble = '''
<p>
    Starting from zero, each term of the sequence is <b>a(n) = a(n-1) - n</b>
    but only if <b>a(n) > 0</b> and it has not previously generated. In case
    the condition doesn't hold, <b>a(n) = a(n-1) + n</b>.

<p>Print the first <b>250</b> terms of the sequence one per line.
'''


[Rock-paper-scissors-Spock-lizard]
category = 'Gaming'
links = [
    { name = 'Rules', url = 'http://www.samkass.com/theories/RPSSL.html' },
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Rock_paper_scissors#Additional_weapons' },
]
preamble = '''
<p>
    ✂ cuts 📄 covers 💎 crushes 🦎 poisons 🖖 smashes ✂ decapitates 🦎 eats 📄
    disproves 🖖 vaporizes 💎 crushes ✂.

<p>
    <a href=http://www.samkass.com/theories/RPSSL.html>
        www.samkass.com/theories/RPSSL.html
    </a>
</p>

<ul>
    <li>
        Rock is represented by
        <a href=//emojipedia.org/gem-stone/>“💎” (U+1F48E Gem Stone)</a>,
        though may be replaced by
        <a href=//emojipedia.org/rock/>“Rock”</a> when Unicode 13.0 ships in
        2020.
    <li>
        Paper is represented by
        <a href=//emojipedia.org/page-facing-up/>“📄” (U+1F4C4 Page Facing Up)</a>.
    <li>
        Scissors are represented by
        <a href=//emojipedia.org/black-scissors/>“✂” (U+2702 Black Scissors)</a>,
        note <b>without</b> the U+FE0F variation selector.
    <li>
        Spock is represented by
        <a href=//emojipedia.org/raised-hand-with-part-between-middle-and-ring-fingers/>
            “🖖” (U+1F596 Raised Hand With Part Between Middle and Ring Fingers)
        </a>.
    <li>
        Lizard is represented by
        <a href=//emojipedia.org/lizard/>“🦎” (U+1F98E Lizard)</a>.
</ul>
'''

['Roman to Arabic']
category = 'Transform'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Roman_numerals' },
]
preamble = '''
<p>For each roman numeral argument print the same number in arabic numerals.
'''

['Rule 110']
category = 'Computing'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Rule_110' },
]
preamble = '''
<p>
    Print the first <b>100</b> rows in the Rule 110 cellular automaton
    starting from an initial single living cell.
<p>
    Each new row in the life of the automaton should be a new line, and the rules for whether a cell is alive or dead depends on whether is was alive on the previous iteration, as well as the state of the two neighbouring cells.
    The rules which dictate whether a cell is alive or dead in the next iteration are as follows:
<div>
    <table>
        <thead>
            <tr>
                <th>Previous cells
                <th>New centre cell
        <tbody>
            <tr>
                <th>111
                <th>0
            <tr>
                <th>110
                <th>1
            <tr>
                <th>101
                <th>1
            <tr>
                <th>100
                <th>0
            <tr>
                <th>011
                <th>1
            <tr>
                <th>010
                <th>1
            <tr>
                <th>001
                <th>1
            <tr>
                <th>000
                <th>0
    </table>
</div>
where 1 is alive, 0 is dead, and the middle digit represents the previous state of the current cell.
<p>
    The first 10 rows are shown here:
<pre>         █
        ██
       ███
      ██ █
     █████
    ██   █
   ███  ██
  ██ █ ███
 ███████ █
██     ███
</pre>

'''

['Seven Segment']
category = 'Transform'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Seven-segment_display' },
]
preamble = '''
<p>
    Using pipes and underscores print the argument as if it were displayed on
    a seven segment display.

<p>For example the number <b>0123456789</b> should be displayed as:

<pre> _     _  _     _  _  _  _  _
| |  | _| _||_||_ |_   ||_||_|
|_|  ||_  _|  | _||_|  ||_| _|
</pre>
'''

['Sierpiński Triangle']
category = 'Art'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Sierpiński_triangle' },
]
preamble = '''
<p>
    The Sierpiński triangle is a fractal and attractive fixed set with the
    overall shape of an equilateral triangle, subdivided recursively into
    smaller equilateral triangles.

<p>
    A Sierpiński triangle of order 4 should look like this, print such an
    output:

<pre>               ▲
              ▲ ▲
             ▲   ▲
            ▲ ▲ ▲ ▲
           ▲       ▲
          ▲ ▲     ▲ ▲
         ▲   ▲   ▲   ▲
        ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲
       ▲               ▲
      ▲ ▲             ▲ ▲
     ▲   ▲           ▲   ▲
    ▲ ▲ ▲ ▲         ▲ ▲ ▲ ▲
   ▲       ▲       ▲       ▲
  ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲
 ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲
▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲
</pre>
'''

['Spelling Numbers']
category = 'Transform'
preamble = '''
<p>For each number argument print the same number spelled out in English.

<p>The numbers will be in the range of <b>0</b> to <b>1,000</b> inclusive.
'''

[Sudoku]
category = 'Gaming'
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Sudoku' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Sudoku' },
]
preamble = '''
<p>
    Sudoku is a number puzzle where a grid of 81 digits (9x9) is filled by the
    digits 1-9 such that no row, column, or 3x3 subregion contains duplicate
    digits.

<p>
    Write a program that given an incomplete Sudoku board as 9 arguments of 9
    digits, with blanks respresented by an underscore, print a solved Sudoku
    grid using unicode box-drawing characters like so:

<pre>┏━━━┯━━━┯━━━┳━━━┯━━━┯━━━┳━━━┯━━━┯━━━┓
┃ 2 │ 5 │ 8 ┃ 4 │ 1 │ 7 ┃ 6 │ 9 │ 3 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 6 │ 1 │ 7 ┃ 9 │ 2 │ 3 ┃ 8 │ 5 │ 4 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 9 │ 3 │ 4 ┃ 8 │ 6 │ 5 ┃ 1 │ 7 │ 2 ┃
┣━━━┿━━━┿━━━╋━━━┿━━━┿━━━╋━━━┿━━━┿━━━┫
┃ 3 │ 2 │ 5 ┃ 7 │ 8 │ 1 ┃ 4 │ 6 │ 9 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 8 │ 9 │ 6 ┃ 3 │ 5 │ 4 ┃ 2 │ 1 │ 7 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 7 │ 4 │ 1 ┃ 6 │ 9 │ 2 ┃ 5 │ 3 │ 8 ┃
┣━━━┿━━━┿━━━╋━━━┿━━━┿━━━╋━━━┿━━━┿━━━┫
┃ 4 │ 6 │ 9 ┃ 1 │ 3 │ 8 ┃ 7 │ 2 │ 5 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 5 │ 7 │ 3 ┃ 2 │ 4 │ 6 ┃ 9 │ 8 │ 1 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 1 │ 8 │ 2 ┃ 5 │ 7 │ 9 ┃ 3 │ 4 │ 6 ┃
┗━━━┷━━━┷━━━┻━━━┷━━━┷━━━┻━━━┷━━━┷━━━┛
</pre>
'''

['Sudoku V2']
category = 'Gaming'
experiment = -1
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Sudoku' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Sudoku' },
]
preamble = '''
<p>
    Sudoku is a number puzzle where a grid of 81 digits (9x9) is filled by the
    digits 1-9 such that no row, column, or 3x3 subregion contains duplicate
    digits.

<p>
    Write a program that given an incomplete Sudoku board as an argument,
    prints the solved Sudoku board. The grid will be drawn with unicode
    box-drawing characters like so:

<pre>┏━━━┯━━━┯━━━┳━━━┯━━━┯━━━┳━━━┯━━━┯━━━┓
┃ 2 │ 5 │ 8 ┃ 4 │ 1 │ 7 ┃ 6 │ 9 │ 3 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 6 │ 1 │ 7 ┃ 9 │ 2 │ 3 ┃ 8 │ 5 │ 4 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 9 │ 3 │ 4 ┃ 8 │ 6 │ 5 ┃ 1 │ 7 │ 2 ┃
┣━━━┿━━━┿━━━╋━━━┿━━━┿━━━╋━━━┿━━━┿━━━┫
┃ 3 │ 2 │ 5 ┃ 7 │ 8 │ 1 ┃ 4 │ 6 │ 9 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 8 │ 9 │ 6 ┃ 3 │ 5 │ 4 ┃ 2 │ 1 │ 7 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 7 │ 4 │ 1 ┃ 6 │ 9 │ 2 ┃ 5 │ 3 │ 8 ┃
┣━━━┿━━━┿━━━╋━━━┿━━━┿━━━╋━━━┿━━━┿━━━┫
┃ 4 │ 6 │ 9 ┃ 1 │ 3 │ 8 ┃ 7 │ 2 │ 5 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 5 │ 7 │ 3 ┃ 2 │ 4 │ 6 ┃ 9 │ 8 │ 1 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 1 │ 8 │ 2 ┃ 5 │ 7 │ 9 ┃ 3 │ 4 │ 6 ┃
┗━━━┷━━━┷━━━┻━━━┷━━━┷━━━┻━━━┷━━━┷━━━┛
</pre>
'''

['Ten-pin Bowling']
category = 'Gaming'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Ten-pin_bowling' },
]
preamble = '''
<p>
    Given a series of ten-pin bowling scoreboards, determine the final scores
    based on the
    <a href=//www.wikihow.com/Score-Bowling>traditional scoring method</a>.

<p>
    A game consists of ten frames. Each frame, players get up to two rolls to
    knock down all ten pins.

<p>
    If a player gets a strike in the final frame, they get two extra rolls. If
    they get a strike in one of the first nine frames, the value of the
    following two rolls, which may cover multiple frames, is added as a bonus.

<p>
    If a player gets a spare in the final frame, they get one extra roll. If
    they get a spare in one of the first nine frames, the value of the
    following roll is added as a bonus.<p>Each argument represents one game of
    bowling for one player. For each roll, a single character represents the
    number of pins knocked down. Frames are separated by spaces. The following
    symbols are used.

<div>
    <table>
        <thead>
            <tr>
                <th>Symbol
                <th>Description
        <tbody>
            <tr>
                <th>X
                <td>
                    Strike - all ten pins were knocked down on the first roll
                    of a frame, or the bonus rolls of the final frame. A
                    strike in the first nine frames is represented by a space
                    followed by an X, as if the strike happened on the frame’s
                    second roll, even though the frame consists of a single
                    roll.
            <tr>
                <th>/
                <td>
                    Spare - all remaining pins were knocked down on the second
                    roll of a frame, or the second bonus roll of the final
                    frame.
            <tr>
                <th>F
                <td>Foul - part of the bowler’s body went past the foul line.
            <tr>
                <th>-
                <td>Miss - No pins were knocked down.
            <tr>
                <th>⑤⑥⑦⑧
                <td>
                    Split - the foremost pin is knocked down and there is a
                    gap of at least one pin between the pins that remain
                    standing.
    </table>
</div>

<p>
    Output the total score for each game on a separate line. The total score
    is the total number of pins knocked down plus strike and spare bonuses.
'''

[Tongue-twisters]
category = 'Art'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Tongue-twister' },
]
preamble = '''
<p>Output the following tongue twisters with a blank line between each one:

<blockquote>
How much wood would a woodchuck chuck,
If a woodchuck could chuck wood?
A woodchuck would chuck all the wood he could chuck
If a woodchuck would chuck wood.
</blockquote>

<blockquote>
Peter Piper picked a peck of pickled peppers.
A peck of pickled peppers Peter Piper picked.
If Peter Piper picked a peck of pickled peppers,
Where's the peck of pickled peppers Peter Piper picked?
</blockquote>

<blockquote>
She sells seashells by the seashore,
The shells she sells are seashells, I'm sure.
So if she sells seashells on the seashore,
Then I'm sure she sells seashore shells.
</blockquote>
'''

['United States']
category = 'Transform'
preamble = '''
<p>
    Given each US state (and a federal district) print the corresponding US
    Postal Service abbreviation.

<p>The full mapping is as follows:

<div id=states>
    <table>
        <thead>
            <tr><th>State<th>Abbr.
        <tbody>
            <tr><td>Alabama<td>AL
            <tr><td>Alaska<td>AK
            <tr><td>Arizona<td>AZ
            <tr><td>Arkansas<td>AR
            <tr><td>California<td>CA
            <tr><td>Colorado<td>CO
            <tr><td>Connecticut<td>CT
            <tr><td>Delaware<td>DE
            <tr><td>District of Columbia<td>DC
            <tr><td>Florida<td>FL
            <tr><td>Georgia<td>GA
            <tr><td>Hawaii<td>HI
            <tr><td>Idaho<td>ID
    </table>
    <table>
        <thead>
            <tr><th>State<th>Abbr.
        <tbody>
            <tr><td>Illinois<td>IL
            <tr><td>Indiana<td>IN
            <tr><td>Iowa<td>IA
            <tr><td>Kansas<td>KS
            <tr><td>Kentucky<td>KY
            <tr><td>Louisiana<td>LA
            <tr><td>Maine<td>ME
            <tr><td>Maryland<td>MD
            <tr><td>Massachusetts<td>MA
            <tr><td>Michigan<td>MI
            <tr><td>Minnesota<td>MN
            <tr><td>Mississippi<td>MS
            <tr><td>Missouri<td>MO
    </table>
    <table>
        <thead>
            <tr><th>State<th>Abbr.
        <tbody>
            <tr><td>Montana<td>MT
            <tr><td>Nebraska<td>NE
            <tr><td>Nevada<td>NV
            <tr><td>New Hampshire<td>NH
            <tr><td>New Jersey<td>NJ
            <tr><td>New Mexico<td>NM
            <tr><td>New York<td>NY
            <tr><td>North Carolina<td>NC
            <tr><td>North Dakota<td>ND
            <tr><td>Ohio<td>OH
            <tr><td>Oklahoma<td>OK
            <tr><td>Oregon<td>OR
            <tr><td>Pennsylvania<td>PA
    </table>
    <table>
        <thead>
            <tr><th>State<th>Abbr.
        <tbody>
            <tr><td>Rhode Island<td>RI
            <tr><td>South Carolina<td>SC
            <tr><td>South Dakota<td>SD
            <tr><td>Tennessee<td>TN
            <tr><td>Texas<td>TX
            <tr><td>Utah<td>UT
            <tr><td>Vermont<td>VT
            <tr><td>Virginia<td>VA
            <tr><td>Washington<td>WA
            <tr><td>West Virginia<td>WV
            <tr><td>Wisconsin<td>WI
            <tr><td>Wyoming<td>WY
    </table>
</div>
'''

['Vampire Numbers']
category = 'Sequence'
links = [
    { name = 'OEIS A014575', url = '//oeis.org/A014575' },
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Vampire_number' },
    { name = 'Wikipedia',    url = '//wikipedia.org/wiki/Vampire_number' },
]
preamble = '''
<p>
    A vampire number is a non-negative number that can be factored into two
    numbers (fangs) each with half as many digits as the original where the
    two factors contain all the digits of the original, in any order. Both
    fangs may not have trailing zeros.

<p>
    For example <b>1260 = 21*60</b>, <b>1395 = 15*93</b>, <b>1435 = 35*41</b>,
    <b>1530 = 30*51</b>, etc..

<p>
    Print all the vampire numbers from <b>1</b> to <b>1,000,000</b> inclusive,
    each on their own line.

<p>
    Be careful with the algorithmic complexity of your solution to avoid
    timing out.
'''

['λ']
category = 'Mathematics'
links = [
    { name = 'OEIS A014715', url = '//oeis.org/A014715' },
    { name = 'Wikipedia',    url = "//www.wikipedia.org/wiki/Conway's_constant" },
]
preamble = '''
<p>Print λ (Conway’s constant) to the first 1,000 decimal places.
'''

['π']
category = 'Mathematics'
links = [
    { name = 'OEIS A000796', url = '//oeis.org/A000796' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Pi' },
]
preamble = '''
<p>Print π (Pi) to the first 1,000 decimal places.
'''

['τ']
category = 'Mathematics'
links = [
    { name = 'Wikipedia', url = '//www.wikipedia.org/wiki/Tau_(mathematical_constant)' },
]
preamble = '''
<p>Print τ (Tau) to the first 1,000 decimal places.
'''

['φ']
category = 'Mathematics'
links = [
    { name = 'OEIS A001622', url = '//oeis.org/A001622' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Golden_ratio' },
]
preamble = '''
<p>Print φ (Phi) to the first 1,000 decimal places.
'''

['√2']
category = 'Mathematics'
links = [
    { name = 'OEIS A002193', url = '//oeis.org/A002193' },
    { name = 'Wikipedia',    url = '//www.wikipedia.org/wiki/Square_root_of_2' },
]
preamble = '''
<p>Print √2 (Pythagoras’ constant) to the first 1,000 decimal places.
'''

['𝑒']
category = 'Mathematics'
links = [
    { name = 'OEIS A001113', url = '//oeis.org/A001113' },
    { name = 'Wikipedia',    url = '//wikipedia.org/wiki/E_(mathematical_constant)' },
]
preamble = '''
<p>Print 𝑒 (Euler’s number) to the first 1,000 decimal places.
'''

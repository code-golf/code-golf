#!/bin/bash -e

if [ "$1" = "-v" ]
then
  /usr/local/bin/tex -v
  exit
fi

function join_by {
  # https://stackoverflow.com/a/17841619/7481517
  local sep=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$sep}"
  fi
}

cd /tmp

code="$1"
shift

# To pass in values, we need to escape some special characters
# All the special characters \{}%&#^_%~ are set to catcode 12 ("other")
# But we still need access to some to finish the definition, so we use
#   byte 1 = {
#   byte 2 = }
#   byte 5 = \
#   byte 6 = #
# The end of the group resets all the catcodes for future tokenizing, but it
# does not change the catcodes of the tokens already created
args=$(join_by "or " "$@")
init="\def\argc{$#}
"'{\catcode`$=12\catcode`&=12\catcode`^=12\catcode`_=12\catcode37=12\catcode`~=12\catcode`#=12\catcode6=6\catcode`{=12\catcode1=1\catcode`}=12\catcode2=2\catcode5=0\catcode92=12
globaldefargv[1]ifcase1 '"$args"'elsefi'

# \footline={} disables page numbers
# \parindex=0pt prevents per-paragraph indentation
# \hsize and \vsize set the page dimensions. I set them a bit less than the
#   maximum legal dimension which is less than 16384pt.
# \bye closes the document (TeX doesn't handle EOF how you might expect)
code_to_run="\footline={}\parindent=0pt\hsize=16000pt\vsize=16000pt\relax
$init
$code
\bye"

echo "$code_to_run" | /usr/local/bin/tex >&2

if [[ -f texput.dvi ]]; then
  dvi-to-text texput.dvi
fi

echo "-----------" >&2

cat texput.log >&2

#!/bin/bash -e

if [ "$1" = "-v" ]
then
  /usr/local/bin/tex -v
  exit
fi

function join_by {
  # https://stackoverflow.com/a/17841619/7481517
  local sep=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$sep}"
  fi
}

cd /tmp

code="$1"
shift

init="\def\argc{$#}"
if [ $# -eq 0 ]; then
  init+='\global\def\argv[#1]{}'
else
  # separate arg0 from the rest of the args
  arg0="$1"
  shift
  args=$(join_by "or" "$@")
  # To pass in values, we need to escape some special characters
  # All the special characters \{}%&#^_%~ are set to catcode 12 ("other")
  # Also set the whitespace characters to catcode 12, unlike \dospecials
  # But we still need access to some to finish the definition, so we use
  #   byte 1 = begin group (previously {)
  #   byte 2 = end group (previously })
  #   byte 4 = space
  #   byte 5 = escape (previously \)
  #   byte 6 = parameter (previously #)
  # The end of the group resets all the catcodes for future tokenizing, but it
  # does not change the catcodes of the tokens already created
  init+='
{\catcode1=1\catcode2=2\catcode5=0\catcode6=6\catcode4=10
\catcode`$=12\catcode`&=12\catcode`^=12\catcode`_=12\catcode37=12
\catcode`~=12\catcode`#=12\catcode`{=12\catcode`}=12\catcode9=12
\catcode32=12\catcode10=12\catcode12=12\catcode13=13\catcode92=12
'
  # The following line reads something like
  #   \global\def\argv[#1]{
  #     \ifnum#1=0
  #       arg0
  #     \else
  #       \ifcase#1 \or arg1 \or arg2 \or ... \or argN \fi
  #     \fi
  #   }
  # we handle 0 separately to avoid it starting with a space:
  #   \ifcase#1arg0\or...    doesn't read the index right
  #   \ifcase#1 arg0\or...   starts with an space
  #   \ifcase#1{}arg0\or...  starts with an empty group (invisible but brutal)
  #   \ifcase#1\relax arg0\or...  starts with a \relax (invisible but brutal)
  # no easy way directly in the \ifcase, so use the extra \ifnum wrapper
  #   \ifnum#1=0 arg0\else\ifcase\or arg1\or arg2\fi\fi
  # ensures that arg0 is preceded by a digit (which removes the space), or a 
  # macro which doesn't get expanded (which removes the space)
  #
  # Note: If you ever come back to this, make sure it works for
  # argv[\the\i], argv[\i], and argv[\count0], and hole args starting with digits
  init+='globaldefargv[1]ifnum1=0'"$arg0"'elseifcase1or'"$args"'fifi'
fi

# \octet enables the octet font
# \footline={} disables page numbers
# \parindex=0pt prevents per-paragraph indentation
# \hsize and \vsize set the page dimensions. I set them a bit less than the
#   maximum legal dimension which is less than 16384pt.
# \bye closes the document (TeX doesn't handle EOF how you might expect)
code_to_run="\octet\footline={}\parindent=0pt\hsize=16000pt\vsize=16000pt\relax
$init
$code
\bye"

# don't stop the bash script if /usr/local/bin/tex errors
set +e

# The randoms might not actually prevent reading the file, but they do
# certainly help avoid grepping out the wrong line
FILENAME="solution_${RANDOM}_${RANDOM}_${RANDOM}_${RANDOM}"

echo "$code_to_run" > "$FILENAME.tex"

/usr/local/bin/tex "$FILENAME.tex" >/dev/null

cat "$FILENAME.log" \
  | grep -Fv "$FILENAME." \
  | grep -Fv "This is TeX, Version 3.141592653" \
  | grep -Fv " [1] )" \
  >&2

if [[ -f "$FILENAME.dvi" ]]; then
  dvi-to-text "$FILENAME.dvi"
fi
